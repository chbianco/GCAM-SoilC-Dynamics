pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
# Create a list of ranges and categorical color scales for each parameter
numeric2Cat_param <- list("param")
numeric2Cat_breaks <- list(c( 0, -1, -4, -10, -20, -30))
numeric2Cat_labels <- list(c("20 to 30", "10 to 20", "4 to 10", "1 to 4", '1'))
names(my_pal) <- unlist(numeric2Cat_labels)
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
numeric2Cat_palette <- list(my_pal) # Can be a custom scale or an R brewer palette or an rmap palette
numeric2Cat_legendTextSize <- list(c(1))
numeric2Cat_list <-list(numeric2Cat_param = numeric2Cat_param,
numeric2Cat_breaks = numeric2Cat_breaks,
numeric2Cat_labels = numeric2Cat_labels,
numeric2Cat_palette = numeric2Cat_palette,
numeric2Cat_legendTextSize = numeric2Cat_legendTextSize); numeric2Cat_list
#Creating the map
rmap::map(location_freq_data,
underLayer= mapGCAMBasins,
numeric2Cat_list = numeric2Cat_list
)
View(location_freq_data)
new_basins <- function(land){
if(grepl('Arkansas_White_Red_Basin', land)){return('Arkansas_White_Red')}
else if(grepl('Brahmani', land)){return('Brahamani')}
else if(grepl('Great_Lakes_Basin', land)){return('Great_Lakes')}
else if(grepl('Hong_(Red_River)', land)){return('Hong_Red_River')}
else if(grepl('Lower_Colorado_River_Basin',land)){return('Lower_Colorado_River')}
else if(grepl('Mahanadi', land)){return('Mahandi')}
else if(grepl('Missouri_River_Basin', land)){return('Missouri_River')}
else if(grepl('New_England_Basin', land)){return('New_England')}
else if(grepl('Ohio_River_Basin', land) ){return('Ohio_River')}
else if(grepl('Pacific_Northwest_Basin', land) ){return('Pacific_Northwest')}
else if(grepl('South_Atlantic_Gulf_Basin', land) ){return('South_Atlantic_Gulf')}
else if(grepl('Upper_Mississippi_Basin', land) ){return('Upper_Mississippi')}
else{return(land)}
}
#Apply the function to the dataset
sapply(location_freq_data$subRegion, new_basins) -> better_basins
location_freq_data %>%
mutate(subRegion = better_basins) -> location_freq_data
#Making the map look pretty
# Build your palette
getcol = colorRampPalette(brewer.pal(6, 'Oranges'));
reds = getcol(6)[1:5];
my_pal <- rev(c(rev(reds)))
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
# Create a list of ranges and categorical color scales for each parameter
numeric2Cat_param <- list("param")
numeric2Cat_breaks <- list(c( 0, -1, -4, -10, -20, -30))
numeric2Cat_labels <- list(c("20 to 30", "10 to 20", "4 to 10", "1 to 4", '1'))
names(my_pal) <- unlist(numeric2Cat_labels)
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
numeric2Cat_palette <- list(my_pal) # Can be a custom scale or an R brewer palette or an rmap palette
numeric2Cat_legendTextSize <- list(c(1))
numeric2Cat_list <-list(numeric2Cat_param = numeric2Cat_param,
numeric2Cat_breaks = numeric2Cat_breaks,
numeric2Cat_labels = numeric2Cat_labels,
numeric2Cat_palette = numeric2Cat_palette,
numeric2Cat_legendTextSize = numeric2Cat_legendTextSize); numeric2Cat_list
#Creating the map
rmap::map(location_freq_data,
underLayer= mapGCAMBasins,
numeric2Cat_list = numeric2Cat_list
)
#Making the map look pretty
# Build your palette
getcol = colorRampPalette(brewer.pal(6, 'Oranges'));
reds = getcol(6)[1:5];
my_pal <- rev(c(rev(reds)))
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
# Create a list of ranges and categorical color scales for each parameter
numeric2Cat_param <- list("param")
numeric2Cat_breaks <- list(c( -30, -20, -10, -4, -1))
numeric2Cat_labels <- list(c("20 to 30", "10 to 20", "4 to 10", "1 to 4", '1'))
names(my_pal) <- unlist(numeric2Cat_labels)
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
numeric2Cat_palette <- list(my_pal) # Can be a custom scale or an R brewer palette or an rmap palette
numeric2Cat_legendTextSize <- list(c(1))
numeric2Cat_list <-list(numeric2Cat_param = numeric2Cat_param,
numeric2Cat_breaks = numeric2Cat_breaks,
numeric2Cat_labels = numeric2Cat_labels,
numeric2Cat_palette = numeric2Cat_palette,
numeric2Cat_legendTextSize = numeric2Cat_legendTextSize); numeric2Cat_list
#Creating the map
rmap::map(location_freq_data,
underLayer= mapGCAMBasins,
numeric2Cat_list = numeric2Cat_list
)
#Making the map look pretty
# Build your palette
getcol = colorRampPalette(brewer.pal(6, 'Oranges'));
reds = getcol(6)[1:5];
my_pal <- rev(c(rev(reds)))
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
# Create a list of ranges and categorical color scales for each parameter
numeric2Cat_param <- list("param")
numeric2Cat_breaks <- list(c( -30, -20, -10, -4, -1, 0))
numeric2Cat_labels <- list(c("20 to 30", "10 to 20", "4 to 10", "1 to 4", '1'))
names(my_pal) <- unlist(numeric2Cat_labels)
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
numeric2Cat_palette <- list(my_pal) # Can be a custom scale or an R brewer palette or an rmap palette
numeric2Cat_legendTextSize <- list(c(1))
numeric2Cat_list <-list(numeric2Cat_param = numeric2Cat_param,
numeric2Cat_breaks = numeric2Cat_breaks,
numeric2Cat_labels = numeric2Cat_labels,
numeric2Cat_palette = numeric2Cat_palette,
numeric2Cat_legendTextSize = numeric2Cat_legendTextSize); numeric2Cat_list
#Creating the map
rmap::map(location_freq_data,
underLayer= mapGCAMBasins,
numeric2Cat_list = numeric2Cat_list
)
getcol = colorRampPalette(brewer.pal(6, 'Oranges'));
reds = getcol(6)[1:5];
my_pal <- rev(c(rev(reds)))
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
#Making the map look pretty
# Build your palette
getcol = colorRampPalette(brewer.pal(6, 'Oranges'));
reds = getcol(6)[1:5];
my_pal <- rev(c(rev(reds)))
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
# Create a list of ranges and categorical color scales for each parameter
numeric2Cat_param <- list("param")
numeric2Cat_breaks <- list(c(0, -1, -4, -10, -20, -30))
numeric2Cat_labels <- list(c('1',"1 to 4", "4 to 10", "10 to 20", "20 to 30"))
names(my_pal) <- unlist(numeric2Cat_labels)
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
numeric2Cat_palette <- list(my_pal) # Can be a custom scale or an R brewer palette or an rmap palette
numeric2Cat_legendTextSize <- list(c(1))
numeric2Cat_list <-list(numeric2Cat_param = numeric2Cat_param,
numeric2Cat_breaks = numeric2Cat_breaks,
numeric2Cat_labels = numeric2Cat_labels,
numeric2Cat_palette = numeric2Cat_palette,
numeric2Cat_legendTextSize = numeric2Cat_legendTextSize); numeric2Cat_list
#Creating the map
rmap::map(location_freq_data,
underLayer= mapGCAMBasins,
numeric2Cat_list = numeric2Cat_list
)
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
#Making the map look pretty
# Build your palette
getcol = colorRampPalette(brewer.pal(6, 'Oranges'));
reds = getcol(6)[1:5];
my_pal <- rev(c(rev(reds)))
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
# Create a list of ranges and categorical color scales for each parameter
numeric2Cat_param <- list("param")
numeric2Cat_breaks <- list(c(-30, -20, -10, -4, -1, 0))
numeric2Cat_labels <- list(c('1',"1 to 4", "4 to 10", "10 to 20", "20 to 30"))
names(my_pal) <- unlist(numeric2Cat_labels)
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
numeric2Cat_palette <- list(my_pal) # Can be a custom scale or an R brewer palette or an rmap palette
numeric2Cat_legendTextSize <- list(c(1))
numeric2Cat_list <-list(numeric2Cat_param = numeric2Cat_param,
numeric2Cat_breaks = numeric2Cat_breaks,
numeric2Cat_labels = numeric2Cat_labels,
numeric2Cat_palette = numeric2Cat_palette,
numeric2Cat_legendTextSize = numeric2Cat_legendTextSize); numeric2Cat_list
#Creating the map
rmap::map(location_freq_data,
underLayer= mapGCAMBasins,
numeric2Cat_list = numeric2Cat_list
)
source("C:/Users/bian240/OneDrive - PNNL/Desktop/Initial Project Code/GCAM-SoilC-Dynamics/Rmap_experimental_location.R")
source("C:/Users/bian240/OneDrive - PNNL/Desktop/Initial Project Code/GCAM-SoilC-Dynamics/Rmap_experimental_location.R")
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
#Making the map look pretty
# Build your palette
getcol = colorRampPalette(brewer.pal(6, 'Oranges'));
reds = getcol(6)[1:5];
my_pal <- rev(c(rev(reds)))
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
# Create a list of ranges and categorical color scales for each parameter
numeric2Cat_param <- list("param")
numeric2Cat_breaks <- list(c(-0, -1, -4, -10, -20, -30))
numeric2Cat_labels <- list(c('1',"1 to 4", "4 to 10", "10 to 20", "20 to 30"))
names(my_pal) <- unlist(numeric2Cat_labels)
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
numeric2Cat_palette <- list(my_pal) # Can be a custom scale or an R brewer palette or an rmap palette
numeric2Cat_legendTextSize <- list(c(1))
numeric2Cat_list <-list(numeric2Cat_param = numeric2Cat_param,
numeric2Cat_breaks = numeric2Cat_breaks,
numeric2Cat_labels = numeric2Cat_labels,
numeric2Cat_palette = numeric2Cat_palette,
numeric2Cat_legendTextSize = numeric2Cat_legendTextSize); numeric2Cat_list
#Creating the map
rmap::map(location_freq_data,
underLayer= mapGCAMBasins,
numeric2Cat_list = numeric2Cat_list
)
#Making the map look pretty
# Build your palette
getcol = colorRampPalette(brewer.pal(6, 'Oranges'));
reds = getcol(6)[1:5];
my_pal <- c(rev(reds))
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
# Create a list of ranges and categorical color scales for each parameter
numeric2Cat_param <- list("param")
numeric2Cat_breaks <- list(c(-0, -1, -4, -10, -20, -30))
numeric2Cat_labels <- list(c('1',"1 to 4", "4 to 10", "10 to 20", "20 to 30"))
names(my_pal) <- unlist(numeric2Cat_labels)
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
numeric2Cat_palette <- list(my_pal) # Can be a custom scale or an R brewer palette or an rmap palette
numeric2Cat_legendTextSize <- list(c(1))
numeric2Cat_list <-list(numeric2Cat_param = numeric2Cat_param,
numeric2Cat_breaks = numeric2Cat_breaks,
numeric2Cat_labels = numeric2Cat_labels,
numeric2Cat_palette = numeric2Cat_palette,
numeric2Cat_legendTextSize = numeric2Cat_legendTextSize); numeric2Cat_list
#Creating the map
rmap::map(location_freq_data,
underLayer= mapGCAMBasins,
numeric2Cat_list = numeric2Cat_list
)
#Making the map look pretty
# Build your palette
getcol = colorRampPalette(brewer.pal(6, 'Oranges'));
reds = getcol(6)[1:5];
my_pal <- c(rev(reds))
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
# Create a list of ranges and categorical color scales for each parameter
numeric2Cat_param <- list("param")
numeric2Cat_breaks <- list(c(-0, -1, -4, -10, -20, -30))
numeric2Cat_labels <- rev(list(c('1',"1 to 4", "4 to 10", "10 to 20", "20 to 30")))
names(my_pal) <- unlist(numeric2Cat_labels)
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
numeric2Cat_palette <- list(my_pal) # Can be a custom scale or an R brewer palette or an rmap palette
numeric2Cat_legendTextSize <- list(c(1))
numeric2Cat_list <-list(numeric2Cat_param = numeric2Cat_param,
numeric2Cat_breaks = numeric2Cat_breaks,
numeric2Cat_labels = numeric2Cat_labels,
numeric2Cat_palette = numeric2Cat_palette,
numeric2Cat_legendTextSize = numeric2Cat_legendTextSize); numeric2Cat_list
#Creating the map
rmap::map(location_freq_data,
underLayer= mapGCAMBasins,
numeric2Cat_list = numeric2Cat_list
)
#Making the map look pretty
# Build your palette
getcol = colorRampPalette(brewer.pal(6, 'Oranges'));
reds = getcol(6)[1:5];
my_pal <- c(rev(reds))
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
# Create a list of ranges and categorical color scales for each parameter
numeric2Cat_param <- list("param")
numeric2Cat_breaks <- rev(list(c(-0, -1, -4, -10, -20, -30)))
numeric2Cat_labels <- rev(list(c('1',"1 to 4", "4 to 10", "10 to 20", "20 to 30")))
names(my_pal) <- unlist(numeric2Cat_labels)
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
numeric2Cat_palette <- list(my_pal) # Can be a custom scale or an R brewer palette or an rmap palette
numeric2Cat_legendTextSize <- list(c(1))
numeric2Cat_list <-list(numeric2Cat_param = numeric2Cat_param,
numeric2Cat_breaks = numeric2Cat_breaks,
numeric2Cat_labels = numeric2Cat_labels,
numeric2Cat_palette = numeric2Cat_palette,
numeric2Cat_legendTextSize = numeric2Cat_legendTextSize); numeric2Cat_list
#Creating the map
rmap::map(location_freq_data,
underLayer= mapGCAMBasins,
numeric2Cat_list = numeric2Cat_list
)
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
#Making the map look pretty
# Build your palette
getcol = colorRampPalette(brewer.pal(7, 'Oranges'));
reds = getcol(7)[1:6];
my_pal <- c(rev(reds))
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
# Create a list of ranges and categorical color scales for each parameter
numeric2Cat_param <- list("param")
numeric2Cat_breaks <- rev(list(c(-0, -1, -4, -10, -20, -30)))
numeric2Cat_labels <- rev(list(c('1',"1 to 4", "4 to 10", "10 to 20", "20 to 30")))
names(my_pal) <- unlist(numeric2Cat_labels)
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
numeric2Cat_palette <- list(my_pal) # Can be a custom scale or an R brewer palette or an rmap palette
numeric2Cat_legendTextSize <- list(c(1))
numeric2Cat_list <-list(numeric2Cat_param = numeric2Cat_param,
numeric2Cat_breaks = numeric2Cat_breaks,
numeric2Cat_labels = numeric2Cat_labels,
numeric2Cat_palette = numeric2Cat_palette,
numeric2Cat_legendTextSize = numeric2Cat_legendTextSize); numeric2Cat_list
#Creating the map
rmap::map(location_freq_data,
underLayer= mapGCAMBasins,
numeric2Cat_list = numeric2Cat_list
)
reds = getcol(6)[1:5];
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
getcol = colorRampPalette(brewer.pal(6, 'Oranges'));
reds = getcol(6)[1:5];
my_pal <- c(rev(reds))
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
# Create a list of ranges and categorical color scales for each parameter
numeric2Cat_param <- list("param")
numeric2Cat_breaks <- rev(list(c(-0, -1, -4, -10, -20, -30)))
numeric2Cat_labels <- rev(list(c('1',"1 to 4", "4 to 10", "10 to 20", "20 to 30")))
names(my_pal) <- unlist(numeric2Cat_labels)
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
numeric2Cat_palette <- list(my_pal) # Can be a custom scale or an R brewer palette or an rmap palette
numeric2Cat_legendTextSize <- list(c(1))
numeric2Cat_list <-list(numeric2Cat_param = numeric2Cat_param,
numeric2Cat_breaks = numeric2Cat_breaks,
numeric2Cat_labels = numeric2Cat_labels,
numeric2Cat_palette = numeric2Cat_palette,
numeric2Cat_legendTextSize = numeric2Cat_legendTextSize); numeric2Cat_list
#Creating the map
rmap::map(location_freq_data,
underLayer= mapGCAMBasins,
numeric2Cat_list = numeric2Cat_list
)
colorRampPalette(brewer.pal(6, 'Oranges'));
colorRampPalette(brewer.pal(6, 'Oranges'))
colorRampPalette(brewer.pal(6, 'Oranges'))
colorRampPalette(brewer.pal(6, 'Oranges'))
colorRampPalette(brewer.pal(6, 'Oranges'))
#Making the map look pretty
# Build your palette
getcol = colorRampPalette(brewer.pal(6, 'Oranges'));
getcol
getcol(6)[1:5]
getcol(5)[1:5]
c(rev(reds))
#Making the map look pretty
# Build your palette
getcol = colorRampPalette(brewer.pal(6, 'Oranges'));
reds = getcol(5)[1:5];
my_pal <- c(rev(reds))
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
my_pal <- c((reds))
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
# Create a list of ranges and categorical color scales for each parameter
numeric2Cat_param <- list("param")
numeric2Cat_breaks <- rev(list(c(-0, -1, -4, -10, -20, -30)))
numeric2Cat_labels <- rev(list(c('1',"1 to 4", "4 to 10", "10 to 20", "20 to 30")))
names(my_pal) <- unlist(numeric2Cat_labels)
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
numeric2Cat_palette <- list(my_pal) # Can be a custom scale or an R brewer palette or an rmap palette
numeric2Cat_legendTextSize <- list(c(1))
numeric2Cat_list <-list(numeric2Cat_param = numeric2Cat_param,
numeric2Cat_breaks = numeric2Cat_breaks,
numeric2Cat_labels = numeric2Cat_labels,
numeric2Cat_palette = numeric2Cat_palette,
numeric2Cat_legendTextSize = numeric2Cat_legendTextSize); numeric2Cat_list
#Creating the map
rmap::map(location_freq_data,
underLayer= mapGCAMBasins,
numeric2Cat_list = numeric2Cat_list
)
numeric2Cat_breaks <- (list(c(-0, -1, -4, -10, -20, -30)))
numeric2Cat_labels <- (list(c('1',"1 to 4", "4 to 10", "10 to 20", "20 to 30")))
names(my_pal) <- unlist(numeric2Cat_labels)
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
numeric2Cat_palette <- list(my_pal) # Can be a custom scale or an R brewer palette or an rmap palette
numeric2Cat_legendTextSize <- list(c(1))
numeric2Cat_list <-list(numeric2Cat_param = numeric2Cat_param,
numeric2Cat_breaks = numeric2Cat_breaks,
numeric2Cat_labels = numeric2Cat_labels,
numeric2Cat_palette = numeric2Cat_palette,
numeric2Cat_legendTextSize = numeric2Cat_legendTextSize); numeric2Cat_list
#Creating the map
rmap::map(location_freq_data,
underLayer= mapGCAMBasins,
numeric2Cat_list = numeric2Cat_list
)
numeric2Cat_list
location_freq_data
write.csv(location_freq_data, "location_freq_data.csv")
data.frame(subRegion = location_freq$Basin_long_name, value = location_freq$n) %>%
mutate(value = value * -1) -> location_freq_data
location_freq_data %>% mutate(value = value * -1) -> location_freq_data
#Now, we need to rename some basins...
new_basins <- function(land){
if(grepl('Arkansas_White_Red_Basin', land)){return('Arkansas_White_Red')}
else if(grepl('Brahmani', land)){return('Brahamani')}
else if(grepl('Great_Lakes_Basin', land)){return('Great_Lakes')}
else if(grepl('Hong_(Red_River)', land)){return('Hong_Red_River')}
else if(grepl('Lower_Colorado_River_Basin',land)){return('Lower_Colorado_River')}
else if(grepl('Mahanadi', land)){return('Mahandi')}
else if(grepl('Missouri_River_Basin', land)){return('Missouri_River')}
else if(grepl('New_England_Basin', land)){return('New_England')}
else if(grepl('Ohio_River_Basin', land) ){return('Ohio_River')}
else if(grepl('Pacific_Northwest_Basin', land) ){return('Pacific_Northwest')}
else if(grepl('South_Atlantic_Gulf_Basin', land) ){return('South_Atlantic_Gulf')}
else if(grepl('Upper_Mississippi_Basin', land) ){return('Upper_Mississippi')}
else{return(land)}
}
#Apply the function to the dataset
sapply(location_freq_data$subRegion, new_basins) -> better_basins
location_freq_data %>%
mutate(subRegion = better_basins) -> location_freq_data
#Making the map look pretty
# Build your palette
getcol = colorRampPalette(brewer.pal(6, 'Oranges'));
reds = getcol(5)[1:5];
my_pal <- c((reds))
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
# Create a list of ranges and categorical color scales for each parameter
numeric2Cat_param <- list("param")
numeric2Cat_breaks <- (list(c(0, 1, 4, 10, 20, 30)))
numeric2Cat_labels <- (list(c('1',"1 to 4", "4 to 10", "10 to 20", "20 to 30")))
names(my_pal) <- unlist(numeric2Cat_labels)
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
numeric2Cat_palette <- list(my_pal) # Can be a custom scale or an R brewer palette or an rmap palette
numeric2Cat_legendTextSize <- list(c(1))
numeric2Cat_list <-list(numeric2Cat_param = numeric2Cat_param,
numeric2Cat_breaks = numeric2Cat_breaks,
numeric2Cat_labels = numeric2Cat_labels,
numeric2Cat_palette = numeric2Cat_palette,
numeric2Cat_legendTextSize = numeric2Cat_legendTextSize); numeric2Cat_list
#Creating the map
rmap::map(location_freq_data,
underLayer= mapGCAMBasins,
numeric2Cat_list = numeric2Cat_list
)
Full_Comparison %>%
select(GLU_code, Basin_long_name, GCAM_region_ID, source) %>%
count(Basin_long_name)-> location_freq
data.frame(subRegion = location_freq$Basin_long_name, value = location_freq$n) %>%
mutate(value = value * -1) -> location_freq_data
location_freq_data %>% mutate(value = value * -1) -> location_freq_data
#Now, we need to rename some basins...
new_basins <- function(land){
if(grepl('Arkansas_White_Red_Basin', land)){return('Arkansas_White_Red')}
else if(grepl('Brahmani', land)){return('Brahamani')}
else if(grepl('Great_Lakes_Basin', land)){return('Great_Lakes')}
else if(grepl('Hong_\\(Red_River\\)', land)){return('Hong_Red_River')}
else if(grepl('Lower_Colorado_River_Basin',land)){return('Lower_Colorado_River')}
else if(grepl('Mahanadi', land)){return('Mahandi')}
else if(grepl('Missouri_River_Basin', land)){return('Missouri_River')}
else if(grepl('New_England_Basin', land)){return('New_England')}
else if(grepl('Ohio_River_Basin', land) ){return('Ohio_River')}
else if(grepl('Pacific_Northwest_Basin', land) ){return('Pacific_Northwest')}
else if(grepl('South_Atlantic_Gulf_Basin', land) ){return('South_Atlantic_Gulf')}
else if(grepl('Upper_Mississippi_Basin', land) ){return('Upper_Mississippi')}
else{return(land)}
}
#Apply the function to the dataset
sapply(location_freq_data$subRegion, new_basins) -> better_basins
location_freq_data %>%
mutate(subRegion = better_basins) -> location_freq_data
#Making the map look pretty
# Build your palette
getcol = colorRampPalette(brewer.pal(6, 'Oranges'));
reds = getcol(5)[1:5];
my_pal <- c((reds))
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
# Create a list of ranges and categorical color scales for each parameter
numeric2Cat_param <- list("param")
numeric2Cat_breaks <- (list(c(0, 1, 4, 10, 20, 30)))
numeric2Cat_labels <- (list(c('1',"1 to 4", "4 to 10", "10 to 20", "20 to 30")))
names(my_pal) <- unlist(numeric2Cat_labels)
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
numeric2Cat_palette <- list(my_pal) # Can be a custom scale or an R brewer palette or an rmap palette
numeric2Cat_legendTextSize <- list(c(1))
numeric2Cat_list <-list(numeric2Cat_param = numeric2Cat_param,
numeric2Cat_breaks = numeric2Cat_breaks,
numeric2Cat_labels = numeric2Cat_labels,
numeric2Cat_palette = numeric2Cat_palette,
numeric2Cat_legendTextSize = numeric2Cat_legendTextSize); numeric2Cat_list
#Creating the map
rmap::map(location_freq_data,
underLayer= mapGCAMBasins,
numeric2Cat_list = numeric2Cat_list
)
mapGCAMBasins -> mapGCAMBasins
View(mapGCAMBasins)
#Creating the map
rmap::map(location_freq_data,
overLayer= mapGCAMBasins,
numeric2Cat_list = numeric2Cat_list
)
#Creating the map
rmap::map(location_freq_data,
overLayer= mapGCAMBasins,
numeric2Cat_list = numeric2Cat_list,
crop = FALSE
)
rmap::map(mapGCAMReg32
)
View(location_freq_data)
citation()
citation('tidyverse')
citation('metafor')
View(Full_Comparison)
source("C:/Users/bian240/OneDrive - PNNL/Desktop/Initial Project Code/GCAM-SoilC-Dynamics/Meta_Analysis.R")
Full_Comparison %>%
mutate(source_short = ifelse(source == 'Post & Kwon', 'PostKwon', 'Wei')) %>%
mutate(basin_source = paste(Basin_long_name, source_short)) %>%
filter((paste(Basin_long_name, 'PostKwon') %in% basin_source) & (paste(Basin_long_name, 'Wei') %in% basin_source))
View(Full_Comparison_change)
Full_Comparison %>% group_by(change, source)
Full_Comparison_change %>% group_by(change, source)
Full_Comparison_change %>% group_by(change)
Full_Comparison_change %>% group_by(change) -> test_table
View(test_table)
Full_Comparison_change %>% group_by(change) %>% summarise(sum(change)) -> test_table
Full_Comparison_change %>% group_by(change) %>% summarise(sum = sum(change)) -> test_table
Full_Comparison_change %>% group_by(change) %>% summarise(obs = n()) -> test_table
source("C:/Users/bian240/OneDrive - PNNL/Desktop/Initial Project Code/GCAM-SoilC-Dynamics/Track_Transitions.R")
View(total_transitions_gcam32)
View(total_transitions)
GCAM_k = -log(final_soil_c/initial_soil_c)/soilTimeScale,
source("C:/Users/bian240/OneDrive - PNNL/Desktop/Initial Project Code/GCAM-SoilC-Dynamics/anova.R")
View(long_data)
summary(test_long_data)
TukeyHSD(test_long_data)
source("C:/Users/bian240/OneDrive - PNNL/Desktop/Initial Project Code/GCAM-SoilC-Dynamics/anova.R")
summary(aov_PostKwon)
summary(aov_Wei)
summary(aov_Full)
