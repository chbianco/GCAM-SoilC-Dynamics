numeric2Cat_palette = numeric2Cat_palette,
numeric2Cat_legendTextSize = numeric2Cat_legendTextSize); numeric2Cat_list
#Creating the map
rmap::map(location_freq_data,
numeric2Cat_list = numeric2Cat_list,
underLayer = mapCountries
)
#Making the map look pretty
# Build your palette
getcol = colorRampPalette(brewer.pal(6, 'Oranges'));
reds = getcol(6)[1:5];
my_pal <- rev(c(rev(reds),"white"))
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
# Create a list of ranges and categorical color scales for each parameter
numeric2Cat_param <- list("param")
numeric2Cat_breaks <- list(c(-1 , -4, -10, -20, -30))
numeric2Cat_labels <- list(c('1', "1 to 4", "4 to 10", "10 to 20", "20 to 30"))
names(my_pal) <- unlist(numeric2Cat_labels)
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
numeric2Cat_palette <- list(my_pal) # Can be a custom scale or an R brewer palette or an rmap palette
numeric2Cat_legendTextSize <- list(c(1))
numeric2Cat_list <-list(numeric2Cat_param = numeric2Cat_param,
numeric2Cat_breaks = numeric2Cat_breaks,
numeric2Cat_labels = numeric2Cat_labels,
numeric2Cat_palette = numeric2Cat_palette,
numeric2Cat_legendTextSize = numeric2Cat_legendTextSize); numeric2Cat_list
#Creating the map
rmap::map(location_freq_data,
numeric2Cat_list = numeric2Cat_list,
underLayer = mapCountries
)
# Build your palette
getcol = colorRampPalette(brewer.pal(6, 'Oranges'));
reds = getcol(5)[1:4];
my_pal <- rev(c(rev(reds)))
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
# Create a list of ranges and categorical color scales for each parameter
numeric2Cat_param <- list("param")
numeric2Cat_breaks <- list(c(-1 , -4, -10, -20, -30))
numeric2Cat_labels <- list(c('1', "1 to 4", "4 to 10", "10 to 20", "20 to 30"))
names(my_pal) <- unlist(numeric2Cat_labels)
#Making the map look pretty
# Build your palette
getcol = colorRampPalette(brewer.pal(5, 'Oranges'));
reds = getcol(5)[1:4];
my_pal <- rev(c(rev(reds)))
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
# Create a list of ranges and categorical color scales for each parameter
numeric2Cat_param <- list("param")
numeric2Cat_breaks <- list(c(-1 , -4, -10, -20, -30))
numeric2Cat_labels <- list(c('1', "1 to 4", "4 to 10", "10 to 20", "20 to 30"))
names(my_pal) <- unlist(numeric2Cat_labels)
#Making the map look pretty
# Build your palette
getcol = colorRampPalette(brewer.pal(6, 'Oranges'));
reds = getcol(6)[1:5];
my_pal <- rev(c(rev(reds)))
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
# Create a list of ranges and categorical color scales for each parameter
numeric2Cat_param <- list("param")
numeric2Cat_breaks <- list(c(-1 , -4, -10, -20, -30))
numeric2Cat_labels <- list(c('1', "1 to 4", "4 to 10", "10 to 20", "20 to 30"))
names(my_pal) <- unlist(numeric2Cat_labels)
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
numeric2Cat_palette <- list(my_pal) # Can be a custom scale or an R brewer palette or an rmap palette
numeric2Cat_legendTextSize <- list(c(1))
numeric2Cat_list <-list(numeric2Cat_param = numeric2Cat_param,
numeric2Cat_breaks = numeric2Cat_breaks,
numeric2Cat_labels = numeric2Cat_labels,
numeric2Cat_palette = numeric2Cat_palette,
numeric2Cat_legendTextSize = numeric2Cat_legendTextSize); numeric2Cat_list
#Creating the map
rmap::map(location_freq_data,
numeric2Cat_list = numeric2Cat_list,
underLayer = mapCountries
)
#Making the map look pretty
# Build your palette
getcol = colorRampPalette(brewer.pal(6, 'Oranges'));
reds = getcol(6)[1:5];
my_pal <- rev(c(rev(reds),"white"))
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
# Create a list of ranges and categorical color scales for each parameter
numeric2Cat_param <- list("param")
numeric2Cat_breaks <- list(c(-0, -0.0000000000001, -1 , -4, -10, -20, -30))
numeric2Cat_labels <- list(c("0", '1', "1 to 4", "4 to 10", "10 to 20", "20 to 30"))
names(my_pal) <- unlist(numeric2Cat_labels)
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
numeric2Cat_palette <- list(my_pal) # Can be a custom scale or an R brewer palette or an rmap palette
numeric2Cat_legendTextSize <- list(c(1))
numeric2Cat_list <-list(numeric2Cat_param = numeric2Cat_param,
numeric2Cat_breaks = numeric2Cat_breaks,
numeric2Cat_labels = numeric2Cat_labels,
numeric2Cat_palette = numeric2Cat_palette,
numeric2Cat_legendTextSize = numeric2Cat_legendTextSize); numeric2Cat_list
#Creating the map
rmap::map(location_freq_data,
numeric2Cat_list = numeric2Cat_list,
underLayer = mapCountries
)
#Making the map look pretty
# Build your palette
getcol = colorRampPalette(brewer.pal(6, 'Oranges'));
reds = getcol(6)[1:5];
my_pal <- rev(c(rev(reds)))
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
# Create a list of ranges and categorical color scales for each parameter
numeric2Cat_param <- list("param")
numeric2Cat_breaks <- list(c(-0, -1 , -4, -10, -20, -30))
numeric2Cat_labels <- list(c('1', "1 to 4", "4 to 10", "10 to 20", "20 to 30"))
names(my_pal) <- unlist(numeric2Cat_labels)
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
numeric2Cat_palette <- list(my_pal) # Can be a custom scale or an R brewer palette or an rmap palette
numeric2Cat_legendTextSize <- list(c(1))
numeric2Cat_list <-list(numeric2Cat_param = numeric2Cat_param,
numeric2Cat_breaks = numeric2Cat_breaks,
numeric2Cat_labels = numeric2Cat_labels,
numeric2Cat_palette = numeric2Cat_palette,
numeric2Cat_legendTextSize = numeric2Cat_legendTextSize); numeric2Cat_list
#Creating the map
rmap::map(location_freq_data,
numeric2Cat_list = numeric2Cat_list,
underLayer = mapCountries
)
#Making the map look pretty
# Build your palette
getcol = colorRampPalette(brewer.pal(6, 'Oranges'));
reds = getcol(6)[1:5];
my_pal <- rev(c(rev(reds)))
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
# Create a list of ranges and categorical color scales for each parameter
numeric2Cat_param <- list("param")
numeric2Cat_breaks <- list(c(-30, -20, -10, -4, -1, 0))
numeric2Cat_labels <- list(c('1', "1 to 4", "4 to 10", "10 to 20", "20 to 30"))
names(my_pal) <- unlist(numeric2Cat_labels)
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
numeric2Cat_palette <- list(my_pal) # Can be a custom scale or an R brewer palette or an rmap palette
numeric2Cat_legendTextSize <- list(c(1))
numeric2Cat_list <-list(numeric2Cat_param = numeric2Cat_param,
numeric2Cat_breaks = numeric2Cat_breaks,
numeric2Cat_labels = numeric2Cat_labels,
numeric2Cat_palette = numeric2Cat_palette,
numeric2Cat_legendTextSize = numeric2Cat_legendTextSize); numeric2Cat_list
#Creating the map
rmap::map(location_freq_data,
numeric2Cat_list = numeric2Cat_list,
underLayer = mapCountries
)
#Making the map look pretty
# Build your palette
getcol = colorRampPalette(brewer.pal(6, 'Oranges'));
reds = getcol(6)[1:5];
my_pal <- rev(c(rev(reds)))
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
# Create a list of ranges and categorical color scales for each parameter
numeric2Cat_param <- list("param")
numeric2Cat_breaks <- list(c(-30, -20, -10, -4, -1, 0))
numeric2Cat_labels <- list(c("20 to 30", "10 to 20", "4 to 10", "1 to 4", '1'))
names(my_pal) <- unlist(numeric2Cat_labels)
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
numeric2Cat_palette <- list(my_pal) # Can be a custom scale or an R brewer palette or an rmap palette
numeric2Cat_legendTextSize <- list(c(1))
numeric2Cat_list <-list(numeric2Cat_param = numeric2Cat_param,
numeric2Cat_breaks = numeric2Cat_breaks,
numeric2Cat_labels = numeric2Cat_labels,
numeric2Cat_palette = numeric2Cat_palette,
numeric2Cat_legendTextSize = numeric2Cat_legendTextSize); numeric2Cat_list
#Creating the map
rmap::map(location_freq_data,
numeric2Cat_list = numeric2Cat_list,
underLayer = mapCountries
)
#Making the map look pretty
# Build your palette
getcol = colorRampPalette(brewer.pal(6, 'Oranges'));
reds = getcol(6)[1:5];
my_pal <- rev(c(rev(reds)))
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
# Create a list of ranges and categorical color scales for each parameter
numeric2Cat_param <- list("param")
numeric2Cat_breaks <- list(c( 0, -1, -4, -10, -20, -30))
numeric2Cat_labels <- list(c("20 to 30", "10 to 20", "4 to 10", "1 to 4", '1'))
names(my_pal) <- unlist(numeric2Cat_labels)
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
numeric2Cat_palette <- list(my_pal) # Can be a custom scale or an R brewer palette or an rmap palette
numeric2Cat_legendTextSize <- list(c(1))
numeric2Cat_list <-list(numeric2Cat_param = numeric2Cat_param,
numeric2Cat_breaks = numeric2Cat_breaks,
numeric2Cat_labels = numeric2Cat_labels,
numeric2Cat_palette = numeric2Cat_palette,
numeric2Cat_legendTextSize = numeric2Cat_legendTextSize); numeric2Cat_list
#Creating the map
rmap::map(location_freq_data,
numeric2Cat_list = numeric2Cat_list,
underLayer = mapCountries
)
#Creating the map
rmap::map(location_freq_data,
#numeric2Cat_list = numeric2Cat_list,
underLayer = mapCountries
)
#Creating the map
rmap::map(location_freq_data,
numeric2Cat_list = numeric2Cat_list,
underLayer = mapCountries
)
source("C:/Users/bian240/OneDrive - PNNL/Desktop/Initial Project Code/GCAM-SoilC-Dynamics/Track_Transitions.R")
ggplot(data = total_transitions, aes(x = total_skqm_change, y = change)) +
geom_bar(stat='identity') +
xlab(expression(Total~area~transitioned~(km^2))) + ylab('Transition Type') +
theme_light()
transitions %>%
group_by(change) %>%
summarize(sum(sqkm_change)) %>%
rename(total_skqm_change = `sum(sqkm_change)`) %>%
arrange(desc(total_skqm_change)) %>%
filter(total_skqm_change > 1000000)-> total_transitions
#Sort and sum land use transition by GCAM32 region
transitions %>%
group_by(region_id, change) %>%
summarize(sum(sqkm_change)) %>%
arrange((region_id)) %>%
rename(total_skqm_change = `sum(sqkm_change)`) -> total_transitions_gcam32
#Sort and sum land use transition by basin
transitions %>%
group_by(metric_id, change) %>%
summarize(sum(sqkm_change)) %>%
arrange((metric_id)) %>%
rename(total_skqm_change = `sum(sqkm_change)`) -> total_transitions_glu
#Plotting
#Plot by GCAM32 region
ggplot(data = total_transitions_gcam32, aes(x=total_skqm_change, y=change)) +
geom_bar(stat='identity') +
facet_wrap(~region_id)
#Plot in total
ggplot(data = total_transitions, aes(x = total_skqm_change, y = change)) +
geom_bar(stat='identity') +
xlab(expression(Total~area~transitioned~(km^2))) + ylab('Transition Type') +
theme_light()
#Sum total land use transitions and filter for ones that are meaningfully high
transitions %>%
group_by(change) %>%
summarize(sum(sqkm_change)) %>%
rename(total_skqm_change = `sum(sqkm_change)`) %>%
arrange(desc(total_skqm_change)) %>%
filter(total_skqm_change > 500000)-> total_transitions
#Sort and sum land use transition by GCAM32 region
transitions %>%
group_by(region_id, change) %>%
summarize(sum(sqkm_change)) %>%
arrange((region_id)) %>%
rename(total_skqm_change = `sum(sqkm_change)`) -> total_transitions_gcam32
#Sort and sum land use transition by basin
transitions %>%
group_by(metric_id, change) %>%
summarize(sum(sqkm_change)) %>%
arrange((metric_id)) %>%
rename(total_skqm_change = `sum(sqkm_change)`) -> total_transitions_glu
#Plotting
#Plot by GCAM32 region
ggplot(data = total_transitions_gcam32, aes(x=total_skqm_change, y=change)) +
geom_bar(stat='identity') +
facet_wrap(~region_id)
#Plot in total
ggplot(data = total_transitions, aes(x = total_skqm_change, y = change)) +
geom_bar(stat='identity') +
xlab(expression(Total~area~transitioned~(km^2))) + ylab('Transition Type') +
theme_light()
ggplot(data = total_transitions, aes(x = total_skqm_change, y = change)) +
geom_bar(stat='identity') +
xlab(expression(Total~area~transitioned~(km^2))) + ylab('Transition Type') +
theme_light()
ggsave('total_transitions_bar.jpeg', path = 'Graphs')
ggplot(data = total_transitions_soon, aes(x = total_skqm_change, y = change)) +
geom_bar(stat='identity')
View(filtered_transitions)
simple_land <- function(land){
if(grepl('forest', land)){return('Forest')}
else if(grepl('grassland', land)){return('Grassland')}
else if(grepl('rockicedesert', land)){return('RockIceDesert')}
else if(grepl('shrub', land)){return('Shrubland')}
else if(grepl('tundra',land)){return('Tundra')}
else if(grepl('pasture', land)){return('Pasture')}
else if(grepl('urban', land)){return('Urbanland')}
else if(grepl('irrigated', land) | grepl('rainfed', land)){return('Cropland')}
else if(grepl('otherarableland', land) ){return('OtherArableLand')}
else{return(NA)}
}
#Apply the function to the dataset
sapply(filtered_transitions$to, simple_land) -> to_Land_Use
sapply(filtered_transitions$from, simple_land) -> from_Land_Use
#Replace the to and from columns with the simplified version
filtered_transitions %>%
mutate(to = to_Land_Use) %>%
mutate(from = from_Land_Use) %>%
mutate(change = paste(to, from, sep = '')) -> transitions
#Sum total land use transitions and filter for ones that are meaningfully high
transitions %>%
group_by(change) %>%
summarize(sum(sqkm_change)) %>%
rename(total_skqm_change = `sum(sqkm_change)`) %>%
arrange(desc(total_skqm_change)) %>%
filter(total_skqm_change > 500000)-> total_transitions
#Sort and sum land use transition by GCAM32 region
transitions %>%
group_by(region_id, change) %>%
summarize(sum(sqkm_change)) %>%
arrange((region_id)) %>%
rename(total_skqm_change = `sum(sqkm_change)`) -> total_transitions_gcam32
#Sort and sum land use transition by basin
transitions %>%
group_by(metric_id, change) %>%
summarize(sum(sqkm_change)) %>%
arrange((metric_id)) %>%
rename(total_skqm_change = `sum(sqkm_change)`) -> total_transitions_glu
#Plotting
#Plot by GCAM32 region
ggplot(data = total_transitions_gcam32, aes(x=total_skqm_change, y=change)) +
geom_bar(stat='identity') +
facet_wrap(~region_id)
#Plot in total
ggplot(data = total_transitions, aes(x = total_skqm_change, y = change)) +
geom_bar(stat='identity') +
xlab(expression(Total~area~transitioned~(km^2))) + ylab('Transition Type') +
theme_light()
ggsave('total_transitions_bar.jpeg', path = 'Graphs')
#Now, we do this for only up until 2015 to see what is more common in the near future
transitions_soon <- filter(transitions, year > 2015)
transitions_soon %>%
group_by(change) %>%
summarize(sum(sqkm_change)) %>%
rename(total_skqm_change = `sum(sqkm_change)`) %>%
arrange(desc(total_skqm_change))-> total_transitions_soon
#Plot in total for only transitions in the next 10ish years
ggplot(data = total_transitions_soon, aes(x = total_skqm_change, y = change)) +
geom_bar(stat='identity')
simple_land <- function(land){
if(grepl('forest', land)){return('Forest')}
else if(grepl('grassland', land)){return('Grassland')}
else if(grepl('rockicedesert', land)){return('RockIceDesert')}
else if(grepl('shrub', land)){return('Shrubland')}
else if(grepl('tundra',land)){return('Tundra')}
else if(grepl('pasture', land)){return('Pasture')}
else if(grepl('urban', land)){return('Urbanland')}
else if(grepl('irrigated', land) | grepl('rainfed', land)){return('Cropland')}
else if(grepl('otherarableland', land) ){return('OtherArableLand')}
else{return(NA)}
}
#Apply the function to the dataset
sapply(filtered_transitions$to, simple_land) -> to_Land_Use
sapply(filtered_transitions$from, simple_land) -> from_Land_Use
#Replace the to and from columns with the simplified version
filtered_transitions %>%
mutate(to = to_Land_Use) %>%
mutate(from = from_Land_Use) %>%
mutate(change = paste(from, to, sep = '')) -> transitions
#Sum total land use transitions and filter for ones that are meaningfully high
transitions %>%
group_by(change) %>%
summarize(sum(sqkm_change)) %>%
rename(total_skqm_change = `sum(sqkm_change)`) %>%
arrange(desc(total_skqm_change)) %>%
filter(total_skqm_change > 500000)-> total_transitions
#Sort and sum land use transition by GCAM32 region
transitions %>%
group_by(region_id, change) %>%
summarize(sum(sqkm_change)) %>%
arrange((region_id)) %>%
rename(total_skqm_change = `sum(sqkm_change)`) -> total_transitions_gcam32
#Sort and sum land use transition by basin
transitions %>%
group_by(metric_id, change) %>%
summarize(sum(sqkm_change)) %>%
arrange((metric_id)) %>%
rename(total_skqm_change = `sum(sqkm_change)`) -> total_transitions_glu
#Plotting
#Plot by GCAM32 region
ggplot(data = total_transitions_gcam32, aes(x=total_skqm_change, y=change)) +
geom_bar(stat='identity') +
facet_wrap(~region_id)
#Plot in total
ggplot(data = total_transitions, aes(x = total_skqm_change, y = change)) +
geom_bar(stat='identity') +
xlab(expression(Total~area~transitioned~(km^2))) + ylab('Transition Type') +
theme_light()
ggsave('total_transitions_bar.jpeg', path = 'Graphs')
#Now, we do this for only up until 2015 to see what is more common in the near future
transitions_soon <- filter(transitions, year > 2015)
transitions_soon %>%
group_by(change) %>%
summarize(sum(sqkm_change)) %>%
rename(total_skqm_change = `sum(sqkm_change)`) %>%
arrange(desc(total_skqm_change))-> total_transitions_soon
#Plot in total for only transitions in the next 10ish years
ggplot(data = total_transitions_soon, aes(x = total_skqm_change, y = change)) +
geom_bar(stat='identity')
ggplot(data = total_transitions, aes(x = total_skqm_change, y = change)) +
geom_bar(stat='identity') +
xlab(expression(Total~area~transitioned~(km^2))) + ylab('Transition Type') +
theme_light()
transitions_soon <- filter(total_transitions, year > 2015)
View(total_transitions)
transitions_soon <- filter(transitions, year > 2015)
transitions_soon %>%
group_by(change) %>%
summarize(sum(sqkm_change)) %>%
rename(total_skqm_change = `sum(sqkm_change)`) %>%
arrange(desc(total_skqm_change)) %>%
filter(total_skqm_change > 500000)-> total_transitions_soon
#Plot in total for only transitions in the next 10ish years
ggplot(data = total_transitions_soon, aes(x = total_skqm_change, y = change)) +
geom_bar(stat='identity')
transitions_soon <- filter(transitions, year > 2015)
transitions_soon %>%
group_by(change) %>%
summarize(sum(sqkm_change)) %>%
rename(total_skqm_change = `sum(sqkm_change)`) %>%
arrange(desc(total_skqm_change)) %>%
filter(total_skqm_change > 100000)-> total_transitions_soon
#Plot in total for only transitions in the next 10ish years
ggplot(data = total_transitions_soon, aes(x = total_skqm_change, y = change)) +
geom_bar(stat='identity')
transitions_soon <- filter(transitions, year > 2015)
transitions_soon %>%
group_by(change) %>%
summarize(sum(sqkm_change)) %>%
rename(total_skqm_change = `sum(sqkm_change)`) %>%
arrange(desc(total_skqm_change)) %>%
filter(total_skqm_change > 10000)-> total_transitions_soon
#Plot in total for only transitions in the next 10ish years
ggplot(data = total_transitions_soon, aes(x = total_skqm_change, y = change)) +
geom_bar(stat='identity')
#Now, we do this for only BEFORE  2015 to see what is more common in the past
transitions_soon <- filter(transitions, year < 2015)
transitions_soon %>%
group_by(change) %>%
summarize(sum(sqkm_change)) %>%
rename(total_skqm_change = `sum(sqkm_change)`) %>%
arrange(desc(total_skqm_change)) %>%
filter(total_skqm_change > 10000)-> total_transitions_soon
#Plot in total for only transitions in the next 10ish years
ggplot(data = total_transitions_soon, aes(x = total_skqm_change, y = change)) +
geom_bar(stat='identity')
transitions_soon %>%
group_by(change) %>%
summarize(sum(sqkm_change)) %>%
rename(total_skqm_change = `sum(sqkm_change)`) %>%
arrange(desc(total_skqm_change)) %>%
filter(total_skqm_change > 10000)-> total_transitions_soon
#Plot in total for only transitions in the next 10ish years
ggplot(data = total_transitions_soon, aes(x = total_skqm_change, y = change)) +
geom_bar(stat='identity')
#Now, we do this for only BEFORE  2015 to see what is more common in the past
transitions_soon <- filter(transitions, year < 2015)
transitions_soon %>%
group_by(change) %>%
summarize(sum(sqkm_change)) %>%
rename(total_skqm_change = `sum(sqkm_change)`) %>%
arrange(desc(total_skqm_change)) %>%
filter(total_skqm_change > 500000)-> total_transitions_soon
#Plot in total for only transitions in the next 10ish years
ggplot(data = total_transitions_soon, aes(x = total_skqm_change, y = change)) +
geom_bar(stat='identity')
#Now, we do this for only up until 2015 to see what is more common in the near future
transitions_soon <- filter(transitions, year > 2015)
transitions_soon %>%
group_by(change) %>%
summarize(sum(sqkm_change)) %>%
rename(total_skqm_change = `sum(sqkm_change)`) %>%
arrange(desc(total_skqm_change)) %>%
filter(total_skqm_change > 10000)-> total_transitions_soon
#Plot in total for only transitions in the next 10ish years
ggplot(data = total_transitions_soon, aes(x = total_skqm_change, y = change)) +
geom_bar(stat='identity')
ggplot(data = total_transitions, aes(x = total_skqm_change, y = change)) +
geom_bar(stat='identity') +
xlab(expression(Total~area~transitioned~(km^2))) + ylab('Transition Type') +
theme_light()
ggplot(data = total_transitions, aes(x = total_skqm_change, y = change)) +
geom_bar(stat='identity') +
xlab(expression(Total~area~transitioned~(km^2))) + ylab('Transition Type') +
theme_light()
ggsave('total_transitions_bar.jpeg', path = 'Graphs')
#Now, we do this for only after to see what is more common in the future
transitions_soon <- filter(transitions, year > 2015)
transitions_soon %>%
group_by(change) %>%
summarize(sum(sqkm_change)) %>%
rename(total_skqm_change = `sum(sqkm_change)`) %>%
arrange(desc(total_skqm_change)) %>%
filter(total_skqm_change > 10000)-> total_transitions_soon
#Plot in total for only transitions after 2015
ggplot(data = total_transitions_soon, aes(x = total_skqm_change, y = change)) +
geom_bar(stat='identity')
ggsave('post_2015_transitions_bar.jpeg', path = 'Graphs')
#Now, we do this for only BEFORE  2015 to see what is more common in the past
transitions_soon <- filter(transitions, year < 2015)
transitions_soon %>%
group_by(change) %>%
summarize(sum(sqkm_change)) %>%
rename(total_skqm_change = `sum(sqkm_change)`) %>%
arrange(desc(total_skqm_change)) %>%
filter(total_skqm_change > 500000)-> total_transitions_soon
#Plot in total for only transitions in the past
ggplot(data = total_transitions_soon, aes(x = total_skqm_change, y = change)) +
geom_bar(stat='identity')
ggsave('pre_2015_transitions_bar.jpeg', path = 'Graphs')
source("C:/Users/bian240/OneDrive - PNNL/Desktop/Initial Project Code/GCAM-SoilC-Dynamics/Track_Transitions.R")
ggplot(data = total_transitions_soon, aes(x = total_skqm_change, y = change)) +
geom_bar(stat='identity') +
xlab(expression(Total~area~transitioned~(km^2))) + ylab('Transition Type') +
theme_light()
