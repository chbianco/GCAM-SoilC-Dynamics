df1[x]
runApp('GitHub/hectorui/h2')
source("~/GitHub/hectorui/h2/components/modules/mod_tracking.R")
source("~/GitHub/hectorui/h2/components/modules/mod_tracking.R")
source("~/GitHub/hectorui/h2/components/modules/mod_tracking.R")
source("~/GitHub/hectorui/h2/components/modules/mod_tracking.R")
source("~/GitHub/hectorui/h2/components/modules/mod_tracking.R")
source("~/GitHub/hectorui/h2/components/modules/mod_tracking.R")
source("~/GitHub/hectorui/h2/components/modules/mod_tracking.R")
source("~/GitHub/hectorui/h2/components/modules/mod_tracking.R")
source("~/GitHub/hectorui/h2/components/modules/mod_tracking.R")
source("~/GitHub/hectorui/h2/components/modules/mod_tracking.R")
runApp('GitHub/hectorui/h2')
source("~/GitHub/hectorui/h2/components/modules/mod_tracking.R")
source("~/GitHub/hectorui/h2/components/modules/mod_tracking.R")
runApp('GitHub/hectorui/h2')
runApp('GitHub/hectorui/h2')
runApp('GitHub/hectorui/h2')
df[1]
view()
df[view()]
as.numeric(view())
view()
source("~/GitHub/hectorui/h2/components/modules/mod_tracking.R")
runApp('GitHub/hectorui/h2')
source("~/GitHub/hectorui/h2/components/modules/mod_tracking.R")
runApp('GitHub/hectorui/h2')
view
source("~/GitHub/hectorui/h2/components/modules/mod_tracking.R")
runApp('GitHub/hectorui/h2')
source("~/GitHub/hectorui/h2/components/modules/mod_tracking.R")
runApp('GitHub/hectorui/h2')
source("~/GitHub/hectorui/h2/components/modules/mod_tracking.R")
runApp('GitHub/hectorui/h2')
view
source("~/GitHub/hectorui/h2/components/modules/mod_tracking.R")
source("~/GitHub/hectorui/h2/components/modules/mod_tracking.R")
source("~/GitHub/hectorui/h2/components/modules/mod_tracking.R")
runApp('GitHub/hectorui/h2')
source("~/GitHub/hectorui/h2/components/modules/mod_tracking.R")
runApp('GitHub/hectorui/h2')
source("~/GitHub/hectorui/h2/components/modules/mod_tracking.R")
runApp('GitHub/hectorui/h2')
input$view
view
df[view]
~ year
year
df$year
df$source_amt
filter(df, source_name == "HL Ocean")[view]
source("~/GitHub/hectorui/h2/components/modules/mod_tracking.R")
source("~/GitHub/hectorui/h2/components/modules/mod_tracking.R")
source("~/GitHub/hectorui/h2/components/modules/mod_tracking.R")
runApp('GitHub/hectorui/h2')
filter(df,source_name=="HL Ocean")$year
filter(df,source_name=="HL Ocean")
filter(df1,source_name=="HL Ocean")
filter(df1,source_name=="HL Ocean")$year
filter(df1,source_name=="HL Ocean")$source_fraction
filter(df1,source_name=="HL Ocean")$source_amt
source("~/GitHub/hectorui/h2/components/modules/mod_tracking.R")
runApp('GitHub/hectorui/h2')
x = filter(df, source_name == "HL Ocean")$year,
x = filter(df, source_name == "HL Ocean")$year
filter(df1, source_name == "HL Ocean")[10]
filter(df1, source_name == "LL Ocean")$source_amt
filter(df1, source_name == "Intermediate Ocean")$source_amt
filter(df1, source_name == "Deep Ocean")$source_amt
source("~/GitHub/hectorui/h2/components/modules/mod_tracking.R")
runApp('GitHub/hectorui/h2')
source("~/GitHub/hectorui/h2/components/modules/mod_tracking.R")
library(hector)
ini <- system.file("input/hector_ssp245.ini", package = "hector")
core <- newcore(ini, name = "ssp245-default")
core
fetchvars(core, dates = NA, vars = PERMAFROST_C())
invisible(run(core))
?invisible
climate_vars <- c(ATMOSPHERIC_CO2(), GLOBAL_TAS(), RF_CO2(), RF_TOTAL())
permafrost_vars <- c(PERMAFROST_C(), THAWEDP_C(), RH(), CONCENTRATIONS_CH4())
run1 <- fetchvars(core, dates = 1745:2300, vars = c(climate_vars, permafrost_vars))
shutdown(core)
run1
core <- newcore(ini, name = "ssp245-permafrost")
setvar(core, 0, PERMAFROST_C(), 865, "Pg C")
invisible(run(core))
run2 <- fetchvars(core, dates = 1745:2300, vars = c(climate_vars, permafrost_vars))
PERMAFROST_C()
fetchvars(core,2300,PERMAFROST_C())
source("~/GitHub/hectorui/h2/components/modules/mod_run.R")
source("~/GitHub/hectorui/h2/components/modules/mod_run.R")
source("~/GitHub/hectorui/h2/components/modules/mod_run.R")
source("~/GitHub/hectorui/h2/components/modules/mod_run.R")
source("~/GitHub/hectorui/h2/components/modules/mod_run.R")
shiny::runApp('GitHub/hectorui/h2')
source("~/GitHub/hectorui/h2/components/modules/mod_run.R")
runApp('GitHub/hectorui/h2')
runApp('GitHub/hectorui/h2')
source("~/GitHub/hectorui/h2/components/modules/mod_run.R", echo=TRUE)
runApp('GitHub/hectorui/h2')
input$permafrost
source("~/GitHub/hectorui/h2/components/modules/mod_run.R")
runApp('GitHub/hectorui/h2')
input$permafrost
fetchvars(core,2000,PERMAFROST_C())
Q
runApp('GitHub/hectorui/h2')
fetchvars(core(),2000,PERMAFROST_C())
source("~/GitHub/hectorui/h2/components/modules/mod_run.R")
runApp('GitHub/hectorui/h2')
fetchvars(core(),2000,PERMAFROST_C())
source("~/GitHub/hectorui/h2/components/modules/mod_run.R")
runApp('GitHub/hectorui/h2')
?materialSwitch
source("~/GitHub/hectorui/h2/components/modules/mod_run.R")
runApp('GitHub/hectorui/h2')
source("~/GitHub/hectorui/h2/components/modules/mod_run.R")
runApp('GitHub/hectorui/h2')
shiny::runApp('GitHub/hectorui/h2')
runApp('GitHub/hectorui/h2')
runApp('GitHub/hectorui/h2')
runApp('RStudio/tracking_animation/tracking-shiny')
runApp('GitHub/hectorui/h2')
runApp('GitHub/hectorui/h2')
?anim_save
library(R6)
library(shiny)
library(hector)
library(dplyr)
library(ggplot2)
library(shinycssloaders)
library(plotly)
library(DT)
library(shinyWidgets)
library(gganimate)
library(tidyverse)
library(shinyBS)
?anim_save
runApp('GitHub/hectorui/h2')
source("~/GitHub/hectorui/h2/components/modules/mod_tracking.R")
runApp('GitHub/hectorui/h2')
runApp('GitHub/hectorui/h2')
source("~/GitHub/hectorui/h2/components/modules/mod_tracking.R")
shiny::runApp('GitHub/hectorui/h2')
source("~/GitHub/hectorui/h2/components/modules/mod_tracking.R")
runApp('GitHub/hectorui/h2')
debugSource("~/GitHub/hectorui/h2/components/modules/mod_tracking.R")
runApp('GitHub/hectorui/h2')
debugSource("~/GitHub/hectorui/h2/components/modules/mod_tracking.R")
debugSource("~/GitHub/hectorui/h2/components/modules/mod_tracking.R")
runApp('GitHub/hectorui/h2')
source("~/GitHub/hectorui/h2/components/modules/mod_tracking.R")
runApp('GitHub/hectorui/h2')
source("~/GitHub/hectorui/h2/components/modules/mod_tracking.R")
runApp('GitHub/hectorui/h2')
source("~/GitHub/hectorui/h2/components/modules/mod_tracking.R")
runApp('GitHub/hectorui/h2')
source("~/GitHub/hectorui/h2/components/modules/mod_tracking.R")
source("~/GitHub/hectorui/h2/components/modules/mod_tracking.R")
runApp('GitHub/hectorui/h2')
source("~/GitHub/hectorui/h2/components/modules/mod_tracking.R")
runApp('GitHub/hectorui/h2')
source("~/GitHub/hectorui/h2/components/modules/mod_tracking.R")
source("~/GitHub/hectorui/h2/components/modules/mod_tracking.R")
source("~/GitHub/hectorui/h2/components/modules/mod_tracking.R")
source("~/GitHub/hectorui/h2/components/modules/mod_tracking.R")
source("~/GitHub/hectorui/h2/components/modules/mod_tracking.R")
runApp('GitHub/hectorui/h2')
install.packages("matilda")
library(devtools)
install.packages("miniUI")
library(devtools)
install.packages("githubinstall")
library(githubinstall)
githubinstall("matilda")
install_github("JGCRI/matilda")
?install.packages
install_github("JGCRI/matilda",method="wininet")
install_github("JGCRI/matilda",method="wget")
?install_github
remotes::install_github("JGCRI/matilda")
install_github("JGCRI/matilda",method="auto")
install_github(repo="JGCRI/matilda",method="wget")
githubinsrall("matilda")
githubinstall("matilda")
library(devtools)
install_github("jgcri/matilda")
options(download.file.method="wininet")
devtools::install_github("jgcri/matilda",force=TRUE)
library(matilda)
ini <- system.file("input/hector_ssp245.ini",package="hector")
c_ssp245 <- newcore(ini)
set.seed(1)
?set.seed
param_values <- generate_params(c_ssp245,draws=10)
param_values
results <- iterate_model()
results <- iterate_model(
core=c_ssp245,
params=param_values
)
my_criterion <- new_criterion(GLOBAL_TAS(),
years = 1951:2000,
obs_values = seq(0.4, 1.0, length.out = 50)
)
my_criterion
# Score Hector runs with observed CO2 data
scores <- score_runs(results, criterion_co2_obs(), score_ramp, w1 = 2, w2 = 20)
scores
# Define a new_metric object for Hector analysis
my_metric <- new_metric(GLOBAL_TAS(), 2000:2100, mean)
my_metric
metric_values <- metric_calc(results,my_metric)
# Establish bin limits for grouping metric values
bins <- c(0, 1, 2, 3)
# Calculate probabilities for global_tas under 2C
prob_calc(metric_values$metric_result,
bins = bins,
scores = scores$weights
)
mtcars
?group_by
library(dplyr)
group_by(mtcars,am)
mtcars
mean(mtcars$qsec)
group_by(mtcars, cyl)
mtcars
group_by(mtcars, cyl)
?group_by
mtcars %>% group_by(cyl)
mtcars %>% group_by(vs)
shiny::runApp('GitHub/hectorui/h2')
runApp('GitHub/hectorui/h2')
runApp('GitHub/hectorui/h2')
getOption("repos")
?install.packages
installed.packages()
library(installr)
updateR()
R.version.string
updateR()
shiny::runApp('GitHub/hectorui/h2')
source("~/GitHub/hectorui/h2/components/modules/mod_tracking.R")
source("~/GitHub/hectorui/h2/components/modules/mod_tracking.R")
runApp('GitHub/hectorui/h2')
shiny::runApp('GitHub/hectorui/h2')
r6 <- HectorInputs$new()
r6
View(r6)
View(HectorInputs)
?R6Class
?HectorInputs
View(r6)
shiny::runApp('GitHub/hectorui/h2')
?anim_save
?animate
library(packrat)
install.packages("packrat")
library(packrat)
unused_packages(project="~/Github/hectorui/h2")
unused_packages(project="~/Github/hectorui/h2",lib.loc="C:/Users/done231/AppData/Local/R/win-library/4.3")
library(svglite)
unused_packages(project="~/Github/hectorui/h2",lib.loc="C:/Users/done231/AppData/Local/R/win-library/4.3")
unused_packages(project="~/Github/hectorui/h2",lib.loc="C:/Users/done231/AppData/Local/R/win-library/4.3")$name
status()
packrat::status()
packrat::snapshot()
getwd()
install.packages("NCMisc")
install.packages("NCmisc")
getwd()
list.functions.in.file("GitHub/hectorui/h2", alphabetic = TRUE)
library(NCmisc)
list.functions.in.file("GitHub/hectorui/h2", alphabetic = TRUE)
list.functions.in.file("GitHub/hectorui/h2/global.r", alphabetic = TRUE)
list.functions.in.file("GitHub/hectorui/h2/global.R", alphabetic = TRUE)
source("~/GitHub/hectorui/h2/global.r")
list.functions.in.file("GitHub/hectorui/h2/app.R", alphabetic = TRUE)
list.functions.in.file("GitHub/hectorui/h2/components/modules/mod.run.R", alphabetic = TRUE)
list.functions.in.file("GitHub/hectorui/h2/components/modules/mod_run.R", alphabetic = TRUE)
install.packages("lares")
files_functions("~/Github/hectorui/h2")
library(lares)
files_functions("~/Github/hectorui/h2")
dependencies <- files_functions("~/GitHub/hectorui/h2/global.r")
dependencies
dependencies <- files_functions("~/GitHub/hectorui/h2")
View(dependencies)
?gifski_renderer
install.packages("pacman")
install.packages("cowsay")
say("hi")
library(cowsay)
say("hi")
say("hi")
say("hi")
say("hi")
say("hi")
say("hi")
say("hi")
say("hi")
say("hi", by="random")
say("hi", by="random")
say("hi", by="random")
say("hi", by="random")
say("hi", by="random")
say("hi", by="random")
say("hi", by="random")
say("hi", by="random")
say("hi", by="random")
say("hi", by="random")
say("hi", by="random")
say("hi", by="random")
say("hi", by="random")
say("hi", by="random")
say("hi", by="random")
say("hi", by="random")
say("hi", by="random")
say("hi", by="random")
say("hi", by="random")
say("hi", by="random")
say("hi", by="random")
say("hi", by="random")
shiny::runApp('jeopardy')
library(tidyr)
library(dplyr)
library(ggplot2)
#Load GCAM data
soilC <- read.csv(file = 'Data/GCAM_soilC.csv')
getwd()
setwd("GitHub/GCAM-SoilC-Dynamics-CD")
#Load GCAM data
soilC <- read.csv(file = 'Data/GCAM_soilC.csv')
timescales <- read.csv(file = 'Data/soil_timescales.csv')
glus <- read.csv(file = 'Data/GLU_codes.csv')
regions <- read.csv('Data/GCAM_regions.csv')
soilC
#Load experimental data
PostKwon <- read.csv(file= 'Data/Experimental Data.csv', na.strings = c("", "NA"))
Wei <- read.csv(file= 'Data/Wei et al Data.csv', na.strings = c("", "NA"))
#Join GLU codes with soilC data
soilC %>%
mutate(GLU_code = GLU) %>%
right_join(glus, by='GLU_code') %>%
right_join(regions, by='GCAM_region_ID') %>%
right_join(timescales, by='GCAM_region_ID')-> soilC_regions
#Simplify the data to just the stuff we'll need to compare with experimental data
soilC_regions %>%
select(Land_Type, soil_c, GLU_code, soilTimeScale, GCAM_region_ID, Basin_long_name) -> simple_soilC_regions
#Creating the Post & Kwon comparison data
PostKwon %>%
select(Initial_Land_Use, Final_Land_Use, GLU_code, GCAM_region_ID, Time, Exp_Rate) %>%
na.omit() %>%
mutate(Land_Type = Initial_Land_Use) %>%
right_join(simple_soilC_regions, by = c('GLU_code', 'Land_Type', 'GCAM_region_ID')) %>%
rename(initial_soil_c = soil_c) %>%
select(-Land_Type) %>%
mutate(Land_Type = Final_Land_Use) %>%
right_join(simple_soilC_regions, by = c('GLU_code', 'Land_Type', 'GCAM_region_ID')) %>%
rename(final_soil_c = soil_c) %>%
select(-Land_Type, -soilTimeScale.x, -Basin_long_name.x) %>%
rename(soilTimeScale = soilTimeScale.y, Basin_long_name = Basin_long_name.y) %>%
na.omit() %>%
mutate(GCAM_Rate = (final_soil_c - initial_soil_c)/soilTimeScale, Rate_Difference = Exp_Rate - GCAM_Rate,
Exp_k = -log(abs(Exp_Rate)*Time +1)/Time,
GCAM_k = -log(final_soil_c/initial_soil_c)/soilTimeScale,
source = 'Post & Kwon'
) %>%
#This next line corrects the sign of Exp_k--we had to take the absolute value to avoid NaNs, so this accounts for that
mutate(Exp_k = ifelse(sign(Exp_k) == sign(Exp_Rate), Exp_k*(-1), Exp_k)) -> PostKwon_Comparison
#Creating the Wei et al comparison data
Wei %>%
select(Initial_Land_Use, Final_Land_Use, GLU_code, GCAM_region_ID, OC_decrease, Time) %>%
na.omit() %>%
mutate(Land_Type = Initial_Land_Use) %>%
right_join(simple_soilC_regions, by = c('GLU_code', 'Land_Type', 'GCAM_region_ID')) %>%
rename(initial_soil_c = soil_c) %>%
select(-Land_Type) %>%
mutate(Land_Type = Final_Land_Use) %>%
right_join(simple_soilC_regions, by = c('GLU_code', 'Land_Type', 'GCAM_region_ID')) %>%
rename(final_soil_c = soil_c) %>%
select(-Land_Type, -soilTimeScale.x, -Basin_long_name.x) %>%
rename(soilTimeScale = soilTimeScale.y, Basin_long_name = Basin_long_name.y) %>%
na.omit() %>%
mutate(GCAM_Rate = (final_soil_c - initial_soil_c)/soilTimeScale,
GCAM_k = -log(final_soil_c/initial_soil_c)/soilTimeScale,
Exp_k = -log(1/((abs(OC_decrease)/100) +1))/Time,
source = 'Wei et al'
) %>%
#This next line corrects the sign of Exp_k--we had to take the absolute value to avoid NaNs, so this accounts for that
mutate(Exp_k = ifelse(sign(Exp_k) == sign(OC_decrease), Exp_k, Exp_k*(-1))) -> Wei_Comparison
#Merging the two papers...
#Now, we bind the two rows together. Because the Wei et al data doesn't have any raw rates, we won't include that data from Post & Kwon either
Full_Comparison <- bind_rows(
select(PostKwon_Comparison, -Exp_Rate, -Rate_Difference),
select(Wei_Comparison, -OC_decrease)
)
#IF YOU WANT TWO TYPES, USE THIS
Full_Comparison %>%
pivot_longer(cols = Exp_k:GCAM_k,
names_to = "Type",
values_to = "k") -> full_long_data
#Let's add transition type
full_long_data %>%
mutate(change = paste(Initial_Land_Use, Final_Land_Use, sep = '')) -> change_long_data
#ALL ANOVAS
#Type + Basin (no average)
aov_Full <- aov(k ~ Type + Basin_long_name ,
data = full_long_data)
summary(aov_Full)
TukeyHSD(aov_Full)
AIC(aov_Full)
#Type + Change (no average)
aov_Full_change <- aov(k ~ Type + change,
data = change_long_data)
summary(aov_Full_change)
TukeyHSD(aov_Full_change)
AIC(aov_Full_change)
#Type * Change (no average)
aov_Full_change_times <- aov(k ~ Type * change,
data = change_long_data)
summary(aov_Full_change_times)
TukeyHSD(aov_Full_change_times)
AIC(aov_Full_change_times)
#Type + Basin + change
aov_big <- aov(k ~ Type + Basin_long_name + change,
data = change_long_data)
summary(aov_big)
TukeyHSD(aov_big)
AIC(aov_big)
#Now, we'll do some averages
#Type + change (averaged by change)
change_long_data %>%
group_by(Type, change) %>%
summarize(mean_k = mean(k), std_dev_k = sd(k)) -> change_grouped_long
aov_change <- aov(mean_k ~ Type + change,
data = change_grouped_long)
summary(aov_change)
TukeyHSD(aov_change)
AIC(aov_change)
summary(aov_change)
#Type + Basin (averaged by basin)
#Average by region
change_long_data %>%
group_by(Type, Basin_long_name) %>%
summarize(mean_k = mean(k), std_dev_k = sd(k)) -> basin_grouped_long
aov_basin <- aov(mean_k ~ Type + Basin_long_name,
data = basin_grouped_long)
summary(aov_basin)
AIC(aov_basin)
#Make the mean graph
Full_Comparison %>%
mutate(change = paste(Initial_Land_Use, Final_Land_Use, sep = ' to ')) %>%
mutate(difference = Exp_k - GCAM_k) %>%
group_by(change) %>%
summarise(Mean_k = mean(difference), std_dev = sd(difference), Sample_Size = n()) -> mean_difference
ggplot(mean_difference, aes(x = Mean_k, y = change)) +
geom_point(aes(size = Sample_Size), shape = 15) +
labs(x = 'k', y = 'Transition Type') +
geom_errorbar(aes(xmin=Mean_k - std_dev, xmax=Mean_k + std_dev), width=.2,
position=position_dodge(0.05)) +
xlim(-0.1, 0.1) +
geom_vline(xintercept = 0, linetype = 'dashed', color = 'blue') +
theme_light()
ggsave('Fake_forest.jpeg', path = 'Graphs')
#Probably don't need these
Wei_Comparison %>%
pivot_longer(cols = Exp_k:GCAM_k,
names_to = "Type",
values_to = "k") -> Wei_long_data
PostKwon_Comparison %>%
pivot_longer(cols = Exp_k:GCAM_k,
names_to = "Type",
values_to = "k") -> PostKwon_long_data
#PostKwon ANOVA
aov_PostKwon <- aov(k ~ Type + Basin_long_name,
data = PostKwon_long_data)
summary(aov_PostKwon)
TukeyHSD(aov_PostKwon)
#Wei ANOVA
aov_Wei <- aov(k ~ Type + Basin_long_name,
data = Wei_long_data)
summary(aov_Wei)
TukeyHSD(aov_Wei)
#Averages by region per paper
#Post & Kwon
change_long_data %>%
filter(source == 'Post & Kwon') %>%
group_by(Type, Basin_long_name) %>%
summarize(mean_k = mean(k), std_dev_k = sd(k)) -> PostKwon_basin_grouped_long
aov_basin_postkwon <- aov(mean_k ~ Type + Basin_long_name,
data = PostKwon_basin_grouped_long)
summary(aov_basin_postkwon)
#Wei et al
change_long_data %>%
filter(source == 'Wei et al') %>%
group_by(Type, Basin_long_name) %>%
summarize(mean_k = mean(k), std_dev_k = sd(k)) -> Wei_basin_grouped_long
aov_basin_wei <- aov(mean_k ~ Type + Basin_long_name,
data = Wei_basin_grouped_long)
summary(aov_basin_postkwon)
#Load experimental data
PostKwon <- read.csv(file= 'Data/Experimental Data-CD.csv', na.strings = c("", "NA"))
Wei <- read.csv(file= 'Data/Wei et al Data.csv', na.strings = c("", "NA"))
PostKwon
colnames(PostKwan)
colnames(PostKwon)
#Load experimental data
PostKwon <- read.csv(file= 'Data/Experimental Data-CD.csv', na.strings = c("", "NA"))
PostKwon
