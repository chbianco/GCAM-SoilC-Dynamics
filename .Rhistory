<<<<<<< Updated upstream
sapply(location_freq_data$subRegion, new_basins) -> better_basins
location_freq_data %>%
mutate(subRegion = better_basins) -> location_freq_data
View(location_freq_data)
#Making the map look pretty
# Build your palette
getcol = colorRampPalette(brewer.pal(6, 'Oranges'));
reds = getcol(6)[1:5];
my_pal <- rev(c(rev(reds)))
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
# Create a list of ranges and categorical color scales for each parameter
numeric2Cat_param <- list("param")
numeric2Cat_breaks <- list(c( 0, -1, -4, -10, -20, -30))
numeric2Cat_labels <- list(c("20 to 30", "10 to 20", "4 to 10", "1 to 4", '1'))
names(my_pal) <- unlist(numeric2Cat_labels)
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
numeric2Cat_palette <- list(my_pal) # Can be a custom scale or an R brewer palette or an rmap palette
numeric2Cat_legendTextSize <- list(c(1))
numeric2Cat_list <-list(numeric2Cat_param = numeric2Cat_param,
numeric2Cat_breaks = numeric2Cat_breaks,
numeric2Cat_labels = numeric2Cat_labels,
numeric2Cat_palette = numeric2Cat_palette,
numeric2Cat_legendTextSize = numeric2Cat_legendTextSize); numeric2Cat_list
#Creating the map
rmap::map(location_freq_data,
underLayer= mapGCAMBasins,
numeric2Cat_list = numeric2Cat_list
)
View(location_freq_data)
new_basins <- function(land){
if(grepl('Arkansas_White_Red_Basin', land)){return('Arkansas_White_Red')}
else if(grepl('Brahmani', land)){return('Brahamani')}
else if(grepl('Great_Lakes_Basin', land)){return('Great_Lakes')}
else if(grepl('Hong_(Red_River)', land)){return('Hong_Red_River')}
else if(grepl('Lower_Colorado_River_Basin',land)){return('Lower_Colorado_River')}
else if(grepl('Mahanadi', land)){return('Mahandi')}
else if(grepl('Missouri_River_Basin', land)){return('Missouri_River')}
else if(grepl('New_England_Basin', land)){return('New_England')}
else if(grepl('Ohio_River_Basin', land) ){return('Ohio_River')}
else if(grepl('Pacific_Northwest_Basin', land) ){return('Pacific_Northwest')}
else if(grepl('South_Atlantic_Gulf_Basin', land) ){return('South_Atlantic_Gulf')}
else if(grepl('Upper_Mississippi_Basin', land) ){return('Upper_Mississippi')}
else{return(land)}
}
#Apply the function to the dataset
sapply(location_freq_data$subRegion, new_basins) -> better_basins
location_freq_data %>%
mutate(subRegion = better_basins) -> location_freq_data
#Making the map look pretty
# Build your palette
getcol = colorRampPalette(brewer.pal(6, 'Oranges'));
reds = getcol(6)[1:5];
my_pal <- rev(c(rev(reds)))
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
# Create a list of ranges and categorical color scales for each parameter
numeric2Cat_param <- list("param")
numeric2Cat_breaks <- list(c( 0, -1, -4, -10, -20, -30))
numeric2Cat_labels <- list(c("20 to 30", "10 to 20", "4 to 10", "1 to 4", '1'))
names(my_pal) <- unlist(numeric2Cat_labels)
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
numeric2Cat_palette <- list(my_pal) # Can be a custom scale or an R brewer palette or an rmap palette
numeric2Cat_legendTextSize <- list(c(1))
numeric2Cat_list <-list(numeric2Cat_param = numeric2Cat_param,
numeric2Cat_breaks = numeric2Cat_breaks,
numeric2Cat_labels = numeric2Cat_labels,
numeric2Cat_palette = numeric2Cat_palette,
numeric2Cat_legendTextSize = numeric2Cat_legendTextSize); numeric2Cat_list
#Creating the map
rmap::map(location_freq_data,
underLayer= mapGCAMBasins,
numeric2Cat_list = numeric2Cat_list
=======
soilC <- read.csv(file = 'Data/GCAM_soilC.csv')
timescales <- read.csv(file = 'Data/soil_timescales.csv')
glus <- read.csv(file = 'Data/GLU_codes.csv')
regions <- read.csv('Data/GCAM_regions.csv')
#Load experimental data
PostKwon <- read.csv(file= 'Data/Experimental Data.csv', na.strings = c("", "NA"))
Wei <- read.csv(file= 'Data/Wei et al Data.csv', na.strings = c("", "NA"))
#Join GLU codes with soilC data
soilC %>%
mutate(GLU_code = GLU) %>%
right_join(glus, by='GLU_code') %>%
right_join(regions, by='GCAM_region_ID') %>%
right_join(timescales, by='GCAM_region_ID')-> soilC_regions
#Simplify the data to just the stuff we'll need to compare with experimental data
soilC_regions %>%
select(Land_Type, soil_c, GLU_code, soilTimeScale, GCAM_region_ID, Basin_long_name) -> simple_soilC_regions
#Creating the Post & Kwon comparison data
PostKwon %>%
select(Initial_Land_Use, Final_Land_Use, GLU_code, GCAM_region_ID, Time, Exp_Rate) %>%
na.omit() %>%
mutate(Land_Type = Initial_Land_Use) %>%
right_join(simple_soilC_regions, by = c('GLU_code', 'Land_Type', 'GCAM_region_ID')) %>%
rename(initial_soil_c = soil_c) %>%
select(-Land_Type) %>%
mutate(Land_Type = Final_Land_Use) %>%
right_join(simple_soilC_regions, by = c('GLU_code', 'Land_Type', 'GCAM_region_ID')) %>%
rename(final_soil_c = soil_c) %>%
select(-Land_Type, -soilTimeScale.x, -Basin_long_name.x) %>%
rename(soilTimeScale = soilTimeScale.y, Basin_long_name = Basin_long_name.y) %>%
na.omit() %>%
mutate(GCAM_Rate = (final_soil_c - initial_soil_c)/soilTimeScale, Rate_Difference = Exp_Rate - GCAM_Rate,
Exp_k = -log(abs(Exp_Rate)*Time +1)/Time,
GCAM_k = -log(final_soil_c/initial_soil_c)/soilTimeScale,
source = 'Post & Kwon'
) %>%
#This next line corrects the sign of Exp_k--we had to take the absolute value to avoid NaNs, so this accounts for that
mutate(Exp_k = ifelse(sign(Exp_k) == sign(Exp_Rate), Exp_k*(-1), Exp_k)) -> PostKwon_Comparison
#Creating the Wei et al comparison data
Wei %>%
select(Initial_Land_Use, Final_Land_Use, GLU_code, GCAM_region_ID, OC_decrease, Time) %>%
na.omit() %>%
mutate(Land_Type = Initial_Land_Use) %>%
right_join(simple_soilC_regions, by = c('GLU_code', 'Land_Type', 'GCAM_region_ID')) %>%
rename(initial_soil_c = soil_c) %>%
select(-Land_Type) %>%
mutate(Land_Type = Final_Land_Use) %>%
right_join(simple_soilC_regions, by = c('GLU_code', 'Land_Type', 'GCAM_region_ID')) %>%
rename(final_soil_c = soil_c) %>%
select(-Land_Type, -soilTimeScale.x, -Basin_long_name.x) %>%
rename(soilTimeScale = soilTimeScale.y, Basin_long_name = Basin_long_name.y) %>%
na.omit() %>%
mutate(GCAM_Rate = (final_soil_c - initial_soil_c)/soilTimeScale,
GCAM_k = -log(final_soil_c/initial_soil_c)/soilTimeScale,
Exp_k = -log(1/((abs(OC_decrease)/100) +1))/Time,
source = 'Wei et al'
) %>%
#This next line corrects the sign of Exp_k--we had to take the absolute value to avoid NaNs, so this accounts for that
mutate(Exp_k = ifelse(sign(Exp_k) == sign(OC_decrease), Exp_k, Exp_k*(-1))) -> Wei_Comparison
#Merging the two papers...
#Now, we bind the two rows together. Because the Wei et al data doesn't have any raw rates, we won't include that data from Post & Kwon either
Full_Comparison <- bind_rows(
select(PostKwon_Comparison, -Exp_Rate, -Rate_Difference),
select(Wei_Comparison, -OC_decrease)
>>>>>>> Stashed changes
)
#Making the map look pretty
# Build your palette
getcol = colorRampPalette(brewer.pal(6, 'Oranges'));
reds = getcol(6)[1:5];
my_pal <- rev(c(rev(reds)))
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
# Create a list of ranges and categorical color scales for each parameter
numeric2Cat_param <- list("param")
numeric2Cat_breaks <- list(c( -30, -20, -10, -4, -1))
numeric2Cat_labels <- list(c("20 to 30", "10 to 20", "4 to 10", "1 to 4", '1'))
names(my_pal) <- unlist(numeric2Cat_labels)
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
numeric2Cat_palette <- list(my_pal) # Can be a custom scale or an R brewer palette or an rmap palette
numeric2Cat_legendTextSize <- list(c(1))
numeric2Cat_list <-list(numeric2Cat_param = numeric2Cat_param,
numeric2Cat_breaks = numeric2Cat_breaks,
numeric2Cat_labels = numeric2Cat_labels,
numeric2Cat_palette = numeric2Cat_palette,
numeric2Cat_legendTextSize = numeric2Cat_legendTextSize); numeric2Cat_list
#Creating the map
rmap::map(location_freq_data,
underLayer= mapGCAMBasins,
numeric2Cat_list = numeric2Cat_list
)
#Making the map look pretty
# Build your palette
getcol = colorRampPalette(brewer.pal(6, 'Oranges'));
reds = getcol(6)[1:5];
my_pal <- rev(c(rev(reds)))
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
# Create a list of ranges and categorical color scales for each parameter
numeric2Cat_param <- list("param")
numeric2Cat_breaks <- list(c( -30, -20, -10, -4, -1, 0))
numeric2Cat_labels <- list(c("20 to 30", "10 to 20", "4 to 10", "1 to 4", '1'))
names(my_pal) <- unlist(numeric2Cat_labels)
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
numeric2Cat_palette <- list(my_pal) # Can be a custom scale or an R brewer palette or an rmap palette
numeric2Cat_legendTextSize <- list(c(1))
numeric2Cat_list <-list(numeric2Cat_param = numeric2Cat_param,
numeric2Cat_breaks = numeric2Cat_breaks,
numeric2Cat_labels = numeric2Cat_labels,
numeric2Cat_palette = numeric2Cat_palette,
numeric2Cat_legendTextSize = numeric2Cat_legendTextSize); numeric2Cat_list
#Creating the map
rmap::map(location_freq_data,
underLayer= mapGCAMBasins,
numeric2Cat_list = numeric2Cat_list
)
getcol = colorRampPalette(brewer.pal(6, 'Oranges'));
reds = getcol(6)[1:5];
my_pal <- rev(c(rev(reds)))
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
#Making the map look pretty
# Build your palette
getcol = colorRampPalette(brewer.pal(6, 'Oranges'));
reds = getcol(6)[1:5];
my_pal <- rev(c(rev(reds)))
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
# Create a list of ranges and categorical color scales for each parameter
numeric2Cat_param <- list("param")
numeric2Cat_breaks <- list(c(0, -1, -4, -10, -20, -30))
numeric2Cat_labels <- list(c('1',"1 to 4", "4 to 10", "10 to 20", "20 to 30"))
names(my_pal) <- unlist(numeric2Cat_labels)
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
numeric2Cat_palette <- list(my_pal) # Can be a custom scale or an R brewer palette or an rmap palette
numeric2Cat_legendTextSize <- list(c(1))
numeric2Cat_list <-list(numeric2Cat_param = numeric2Cat_param,
numeric2Cat_breaks = numeric2Cat_breaks,
numeric2Cat_labels = numeric2Cat_labels,
numeric2Cat_palette = numeric2Cat_palette,
numeric2Cat_legendTextSize = numeric2Cat_legendTextSize); numeric2Cat_list
#Creating the map
rmap::map(location_freq_data,
underLayer= mapGCAMBasins,
numeric2Cat_list = numeric2Cat_list
)
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
#Making the map look pretty
# Build your palette
getcol = colorRampPalette(brewer.pal(6, 'Oranges'));
reds = getcol(6)[1:5];
my_pal <- rev(c(rev(reds)))
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
# Create a list of ranges and categorical color scales for each parameter
numeric2Cat_param <- list("param")
numeric2Cat_breaks <- list(c(-30, -20, -10, -4, -1, 0))
numeric2Cat_labels <- list(c('1',"1 to 4", "4 to 10", "10 to 20", "20 to 30"))
names(my_pal) <- unlist(numeric2Cat_labels)
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
numeric2Cat_palette <- list(my_pal) # Can be a custom scale or an R brewer palette or an rmap palette
numeric2Cat_legendTextSize <- list(c(1))
numeric2Cat_list <-list(numeric2Cat_param = numeric2Cat_param,
numeric2Cat_breaks = numeric2Cat_breaks,
numeric2Cat_labels = numeric2Cat_labels,
numeric2Cat_palette = numeric2Cat_palette,
numeric2Cat_legendTextSize = numeric2Cat_legendTextSize); numeric2Cat_list
#Creating the map
rmap::map(location_freq_data,
underLayer= mapGCAMBasins,
numeric2Cat_list = numeric2Cat_list
)
source("C:/Users/bian240/OneDrive - PNNL/Desktop/Initial Project Code/GCAM-SoilC-Dynamics/Rmap_experimental_location.R")
source("C:/Users/bian240/OneDrive - PNNL/Desktop/Initial Project Code/GCAM-SoilC-Dynamics/Rmap_experimental_location.R")
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
#Making the map look pretty
# Build your palette
getcol = colorRampPalette(brewer.pal(6, 'Oranges'));
reds = getcol(6)[1:5];
my_pal <- rev(c(rev(reds)))
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
# Create a list of ranges and categorical color scales for each parameter
numeric2Cat_param <- list("param")
numeric2Cat_breaks <- list(c(-0, -1, -4, -10, -20, -30))
numeric2Cat_labels <- list(c('1',"1 to 4", "4 to 10", "10 to 20", "20 to 30"))
names(my_pal) <- unlist(numeric2Cat_labels)
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
numeric2Cat_palette <- list(my_pal) # Can be a custom scale or an R brewer palette or an rmap palette
numeric2Cat_legendTextSize <- list(c(1))
numeric2Cat_list <-list(numeric2Cat_param = numeric2Cat_param,
numeric2Cat_breaks = numeric2Cat_breaks,
numeric2Cat_labels = numeric2Cat_labels,
numeric2Cat_palette = numeric2Cat_palette,
numeric2Cat_legendTextSize = numeric2Cat_legendTextSize); numeric2Cat_list
#Creating the map
rmap::map(location_freq_data,
underLayer= mapGCAMBasins,
numeric2Cat_list = numeric2Cat_list
)
#Making the map look pretty
# Build your palette
getcol = colorRampPalette(brewer.pal(6, 'Oranges'));
reds = getcol(6)[1:5];
my_pal <- c(rev(reds))
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
# Create a list of ranges and categorical color scales for each parameter
numeric2Cat_param <- list("param")
numeric2Cat_breaks <- list(c(-0, -1, -4, -10, -20, -30))
numeric2Cat_labels <- list(c('1',"1 to 4", "4 to 10", "10 to 20", "20 to 30"))
names(my_pal) <- unlist(numeric2Cat_labels)
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
numeric2Cat_palette <- list(my_pal) # Can be a custom scale or an R brewer palette or an rmap palette
numeric2Cat_legendTextSize <- list(c(1))
numeric2Cat_list <-list(numeric2Cat_param = numeric2Cat_param,
numeric2Cat_breaks = numeric2Cat_breaks,
numeric2Cat_labels = numeric2Cat_labels,
numeric2Cat_palette = numeric2Cat_palette,
numeric2Cat_legendTextSize = numeric2Cat_legendTextSize); numeric2Cat_list
#Creating the map
rmap::map(location_freq_data,
underLayer= mapGCAMBasins,
numeric2Cat_list = numeric2Cat_list
)
#Making the map look pretty
# Build your palette
getcol = colorRampPalette(brewer.pal(6, 'Oranges'));
reds = getcol(6)[1:5];
my_pal <- c(rev(reds))
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
# Create a list of ranges and categorical color scales for each parameter
numeric2Cat_param <- list("param")
numeric2Cat_breaks <- list(c(-0, -1, -4, -10, -20, -30))
numeric2Cat_labels <- rev(list(c('1',"1 to 4", "4 to 10", "10 to 20", "20 to 30")))
names(my_pal) <- unlist(numeric2Cat_labels)
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
numeric2Cat_palette <- list(my_pal) # Can be a custom scale or an R brewer palette or an rmap palette
numeric2Cat_legendTextSize <- list(c(1))
numeric2Cat_list <-list(numeric2Cat_param = numeric2Cat_param,
numeric2Cat_breaks = numeric2Cat_breaks,
numeric2Cat_labels = numeric2Cat_labels,
numeric2Cat_palette = numeric2Cat_palette,
numeric2Cat_legendTextSize = numeric2Cat_legendTextSize); numeric2Cat_list
#Creating the map
rmap::map(location_freq_data,
underLayer= mapGCAMBasins,
numeric2Cat_list = numeric2Cat_list
)
#Making the map look pretty
# Build your palette
getcol = colorRampPalette(brewer.pal(6, 'Oranges'));
reds = getcol(6)[1:5];
my_pal <- c(rev(reds))
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
# Create a list of ranges and categorical color scales for each parameter
numeric2Cat_param <- list("param")
numeric2Cat_breaks <- rev(list(c(-0, -1, -4, -10, -20, -30)))
numeric2Cat_labels <- rev(list(c('1',"1 to 4", "4 to 10", "10 to 20", "20 to 30")))
names(my_pal) <- unlist(numeric2Cat_labels)
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
numeric2Cat_palette <- list(my_pal) # Can be a custom scale or an R brewer palette or an rmap palette
numeric2Cat_legendTextSize <- list(c(1))
numeric2Cat_list <-list(numeric2Cat_param = numeric2Cat_param,
numeric2Cat_breaks = numeric2Cat_breaks,
numeric2Cat_labels = numeric2Cat_labels,
numeric2Cat_palette = numeric2Cat_palette,
numeric2Cat_legendTextSize = numeric2Cat_legendTextSize); numeric2Cat_list
#Creating the map
rmap::map(location_freq_data,
underLayer= mapGCAMBasins,
numeric2Cat_list = numeric2Cat_list
)
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
#Making the map look pretty
# Build your palette
getcol = colorRampPalette(brewer.pal(7, 'Oranges'));
reds = getcol(7)[1:6];
my_pal <- c(rev(reds))
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
# Create a list of ranges and categorical color scales for each parameter
numeric2Cat_param <- list("param")
numeric2Cat_breaks <- rev(list(c(-0, -1, -4, -10, -20, -30)))
numeric2Cat_labels <- rev(list(c('1',"1 to 4", "4 to 10", "10 to 20", "20 to 30")))
names(my_pal) <- unlist(numeric2Cat_labels)
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
numeric2Cat_palette <- list(my_pal) # Can be a custom scale or an R brewer palette or an rmap palette
numeric2Cat_legendTextSize <- list(c(1))
numeric2Cat_list <-list(numeric2Cat_param = numeric2Cat_param,
numeric2Cat_breaks = numeric2Cat_breaks,
numeric2Cat_labels = numeric2Cat_labels,
numeric2Cat_palette = numeric2Cat_palette,
numeric2Cat_legendTextSize = numeric2Cat_legendTextSize); numeric2Cat_list
#Creating the map
rmap::map(location_freq_data,
underLayer= mapGCAMBasins,
numeric2Cat_list = numeric2Cat_list
)
reds = getcol(6)[1:5];
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
getcol = colorRampPalette(brewer.pal(6, 'Oranges'));
reds = getcol(6)[1:5];
my_pal <- c(rev(reds))
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
# Create a list of ranges and categorical color scales for each parameter
numeric2Cat_param <- list("param")
numeric2Cat_breaks <- rev(list(c(-0, -1, -4, -10, -20, -30)))
numeric2Cat_labels <- rev(list(c('1',"1 to 4", "4 to 10", "10 to 20", "20 to 30")))
names(my_pal) <- unlist(numeric2Cat_labels)
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
numeric2Cat_palette <- list(my_pal) # Can be a custom scale or an R brewer palette or an rmap palette
numeric2Cat_legendTextSize <- list(c(1))
numeric2Cat_list <-list(numeric2Cat_param = numeric2Cat_param,
numeric2Cat_breaks = numeric2Cat_breaks,
numeric2Cat_labels = numeric2Cat_labels,
numeric2Cat_palette = numeric2Cat_palette,
numeric2Cat_legendTextSize = numeric2Cat_legendTextSize); numeric2Cat_list
#Creating the map
rmap::map(location_freq_data,
underLayer= mapGCAMBasins,
numeric2Cat_list = numeric2Cat_list
)
colorRampPalette(brewer.pal(6, 'Oranges'));
colorRampPalette(brewer.pal(6, 'Oranges'))
colorRampPalette(brewer.pal(6, 'Oranges'))
colorRampPalette(brewer.pal(6, 'Oranges'))
colorRampPalette(brewer.pal(6, 'Oranges'))
#Making the map look pretty
# Build your palette
getcol = colorRampPalette(brewer.pal(6, 'Oranges'));
getcol
getcol(6)[1:5]
getcol(5)[1:5]
c(rev(reds))
#Making the map look pretty
# Build your palette
getcol = colorRampPalette(brewer.pal(6, 'Oranges'));
reds = getcol(5)[1:5];
my_pal <- c(rev(reds))
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
my_pal <- c((reds))
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
# Create a list of ranges and categorical color scales for each parameter
numeric2Cat_param <- list("param")
numeric2Cat_breaks <- rev(list(c(-0, -1, -4, -10, -20, -30)))
numeric2Cat_labels <- rev(list(c('1',"1 to 4", "4 to 10", "10 to 20", "20 to 30")))
names(my_pal) <- unlist(numeric2Cat_labels)
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
numeric2Cat_palette <- list(my_pal) # Can be a custom scale or an R brewer palette or an rmap palette
numeric2Cat_legendTextSize <- list(c(1))
numeric2Cat_list <-list(numeric2Cat_param = numeric2Cat_param,
numeric2Cat_breaks = numeric2Cat_breaks,
numeric2Cat_labels = numeric2Cat_labels,
numeric2Cat_palette = numeric2Cat_palette,
numeric2Cat_legendTextSize = numeric2Cat_legendTextSize); numeric2Cat_list
#Creating the map
rmap::map(location_freq_data,
underLayer= mapGCAMBasins,
numeric2Cat_list = numeric2Cat_list
)
numeric2Cat_breaks <- (list(c(-0, -1, -4, -10, -20, -30)))
numeric2Cat_labels <- (list(c('1',"1 to 4", "4 to 10", "10 to 20", "20 to 30")))
names(my_pal) <- unlist(numeric2Cat_labels)
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
numeric2Cat_palette <- list(my_pal) # Can be a custom scale or an R brewer palette or an rmap palette
numeric2Cat_legendTextSize <- list(c(1))
numeric2Cat_list <-list(numeric2Cat_param = numeric2Cat_param,
numeric2Cat_breaks = numeric2Cat_breaks,
numeric2Cat_labels = numeric2Cat_labels,
numeric2Cat_palette = numeric2Cat_palette,
numeric2Cat_legendTextSize = numeric2Cat_legendTextSize); numeric2Cat_list
#Creating the map
rmap::map(location_freq_data,
underLayer= mapGCAMBasins,
numeric2Cat_list = numeric2Cat_list
)
numeric2Cat_list
location_freq_data
write.csv(location_freq_data, "location_freq_data.csv")
data.frame(subRegion = location_freq$Basin_long_name, value = location_freq$n) %>%
mutate(value = value * -1) -> location_freq_data
location_freq_data %>% mutate(value = value * -1) -> location_freq_data
#Now, we need to rename some basins...
new_basins <- function(land){
if(grepl('Arkansas_White_Red_Basin', land)){return('Arkansas_White_Red')}
else if(grepl('Brahmani', land)){return('Brahamani')}
else if(grepl('Great_Lakes_Basin', land)){return('Great_Lakes')}
else if(grepl('Hong_(Red_River)', land)){return('Hong_Red_River')}
else if(grepl('Lower_Colorado_River_Basin',land)){return('Lower_Colorado_River')}
else if(grepl('Mahanadi', land)){return('Mahandi')}
else if(grepl('Missouri_River_Basin', land)){return('Missouri_River')}
else if(grepl('New_England_Basin', land)){return('New_England')}
else if(grepl('Ohio_River_Basin', land) ){return('Ohio_River')}
else if(grepl('Pacific_Northwest_Basin', land) ){return('Pacific_Northwest')}
else if(grepl('South_Atlantic_Gulf_Basin', land) ){return('South_Atlantic_Gulf')}
else if(grepl('Upper_Mississippi_Basin', land) ){return('Upper_Mississippi')}
else{return(land)}
}
#Apply the function to the dataset
sapply(location_freq_data$subRegion, new_basins) -> better_basins
location_freq_data %>%
mutate(subRegion = better_basins) -> location_freq_data
#Making the map look pretty
# Build your palette
getcol = colorRampPalette(brewer.pal(6, 'Oranges'));
reds = getcol(5)[1:5];
my_pal <- c((reds))
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
# Create a list of ranges and categorical color scales for each parameter
numeric2Cat_param <- list("param")
numeric2Cat_breaks <- (list(c(0, 1, 4, 10, 20, 30)))
numeric2Cat_labels <- (list(c('1',"1 to 4", "4 to 10", "10 to 20", "20 to 30")))
names(my_pal) <- unlist(numeric2Cat_labels)
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
numeric2Cat_palette <- list(my_pal) # Can be a custom scale or an R brewer palette or an rmap palette
numeric2Cat_legendTextSize <- list(c(1))
numeric2Cat_list <-list(numeric2Cat_param = numeric2Cat_param,
numeric2Cat_breaks = numeric2Cat_breaks,
numeric2Cat_labels = numeric2Cat_labels,
numeric2Cat_palette = numeric2Cat_palette,
numeric2Cat_legendTextSize = numeric2Cat_legendTextSize); numeric2Cat_list
#Creating the map
rmap::map(location_freq_data,
underLayer= mapGCAMBasins,
numeric2Cat_list = numeric2Cat_list
)
Full_Comparison %>%
select(GLU_code, Basin_long_name, GCAM_region_ID, source) %>%
count(Basin_long_name)-> location_freq
data.frame(subRegion = location_freq$Basin_long_name, value = location_freq$n) %>%
mutate(value = value * -1) -> location_freq_data
location_freq_data %>% mutate(value = value * -1) -> location_freq_data
#Now, we need to rename some basins...
new_basins <- function(land){
if(grepl('Arkansas_White_Red_Basin', land)){return('Arkansas_White_Red')}
else if(grepl('Brahmani', land)){return('Brahamani')}
else if(grepl('Great_Lakes_Basin', land)){return('Great_Lakes')}
else if(grepl('Hong_\\(Red_River\\)', land)){return('Hong_Red_River')}
else if(grepl('Lower_Colorado_River_Basin',land)){return('Lower_Colorado_River')}
else if(grepl('Mahanadi', land)){return('Mahandi')}
else if(grepl('Missouri_River_Basin', land)){return('Missouri_River')}
else if(grepl('New_England_Basin', land)){return('New_England')}
else if(grepl('Ohio_River_Basin', land) ){return('Ohio_River')}
else if(grepl('Pacific_Northwest_Basin', land) ){return('Pacific_Northwest')}
else if(grepl('South_Atlantic_Gulf_Basin', land) ){return('South_Atlantic_Gulf')}
else if(grepl('Upper_Mississippi_Basin', land) ){return('Upper_Mississippi')}
else{return(land)}
}
#Apply the function to the dataset
sapply(location_freq_data$subRegion, new_basins) -> better_basins
location_freq_data %>%
mutate(subRegion = better_basins) -> location_freq_data
#Making the map look pretty
# Build your palette
getcol = colorRampPalette(brewer.pal(6, 'Oranges'));
reds = getcol(5)[1:5];
my_pal <- c((reds))
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
# Create a list of ranges and categorical color scales for each parameter
numeric2Cat_param <- list("param")
numeric2Cat_breaks <- (list(c(0, 1, 4, 10, 20, 30)))
numeric2Cat_labels <- (list(c('1',"1 to 4", "4 to 10", "10 to 20", "20 to 30")))
names(my_pal) <- unlist(numeric2Cat_labels)
pie(rep(1,length(my_pal)),label=names(my_pal),col=my_pal)
numeric2Cat_palette <- list(my_pal) # Can be a custom scale or an R brewer palette or an rmap palette
numeric2Cat_legendTextSize <- list(c(1))
numeric2Cat_list <-list(numeric2Cat_param = numeric2Cat_param,
numeric2Cat_breaks = numeric2Cat_breaks,
numeric2Cat_labels = numeric2Cat_labels,
numeric2Cat_palette = numeric2Cat_palette,
numeric2Cat_legendTextSize = numeric2Cat_legendTextSize); numeric2Cat_list
#Creating the map
rmap::map(location_freq_data,
underLayer= mapGCAMBasins,
numeric2Cat_list = numeric2Cat_list
)
mapGCAMBasins -> mapGCAMBasins
View(mapGCAMBasins)
#Creating the map
rmap::map(location_freq_data,
overLayer= mapGCAMBasins,
numeric2Cat_list = numeric2Cat_list
)
#Creating the map
rmap::map(location_freq_data,
overLayer= mapGCAMBasins,
numeric2Cat_list = numeric2Cat_list,
crop = FALSE
)
rmap::map(mapGCAMReg32
)
View(location_freq_data)
citation()
citation('tidyverse')
citation('metafor')
View(Full_Comparison)
source("C:/Users/bian240/OneDrive - PNNL/Desktop/Initial Project Code/GCAM-SoilC-Dynamics/Meta_Analysis.R")
Full_Comparison %>%
<<<<<<< Updated upstream
mutate(source_short = ifelse(source == 'Post & Kwon', 'PostKwon', 'Wei')) %>%
mutate(basin_source = paste(Basin_long_name, source_short)) %>%
filter((paste(Basin_long_name, 'PostKwon') %in% basin_source) & (paste(Basin_long_name, 'Wei') %in% basin_source))
View(Full_Comparison_change)
Full_Comparison %>% group_by(change, source)
Full_Comparison_change %>% group_by(change, source)
Full_Comparison_change %>% group_by(change)
Full_Comparison_change %>% group_by(change) -> test_table
View(test_table)
Full_Comparison_change %>% group_by(change) %>% summarise(sum(change)) -> test_table
Full_Comparison_change %>% group_by(change) %>% summarise(sum = sum(change)) -> test_table
Full_Comparison_change %>% group_by(change) %>% summarise(obs = n()) -> test_table
source("C:/Users/bian240/OneDrive - PNNL/Desktop/Initial Project Code/GCAM-SoilC-Dynamics/Track_Transitions.R")
View(total_transitions_gcam32)
View(total_transitions)
=======
pivot_longer(cols = Exp_k:GCAM_k,
names_to = "Type",
values_to = "k") -> full_long_data
View(full_long_data)
full_long_data %>%
mutate(change = paste(Initial_Land_Use, Final_Land_Use, sep = '')) -> change_long_data
source("C:/Users/bian240/OneDrive - PNNL/Desktop/Initial Project Code/GCAM-SoilC-Dynamics/anova.R")
aov_Full <- aov(k ~ Type + Basin_long_name ,
data = full_long_data)
summary(aov_Full)
TukeyHSD(aov_Full)
AIC(aov_Full)
aov_Full_change <- aov(k ~ Type + change,
data = change_long_data)
summary(aov_Full_change)
TukeyHSD(aov_Full_change)
AIC(aov_Full_change)
aov_Full_change <- aov(k ~ Type + change,
data = change_long_data)
summary(aov_Full_change)
TukeyHSD(aov_Full_change)
AIC(aov_Full_change)
aov_Full_change <- aov(k ~ Type * change,
data = change_long_data)
summary(aov_Full_change)
TukeyHSD(aov_Full_change)
AIC(aov_Full_change)
aov_big <- aov(k ~ Type + Basin_long_name + change,
data = change_long_data)
summary(aov_big)
TukeyHSD(aov_big)
AIC(aov_big)
source("C:/Users/bian240/OneDrive - PNNL/Desktop/Initial Project Code/GCAM-SoilC-Dynamics/anova.R")
aov_big <- aov(k ~ Type + Basin_long_name + change,
data = change_long_data)
summary(aov_big)
TukeyHSD(aov_big)
AIC(aov_big)
aov_Full <- aov(k ~ Type + Basin_long_name ,
data = full_long_data)
summary(aov_Full)
TukeyHSD(aov_Full)
AIC(aov_Full)
View(aov_basin_postkwon)
source("C:/Users/bian240/OneDrive - PNNL/Desktop/Initial Project Code/GCAM-SoilC-Dynamics/Full_Analysis.R")
t.test(Full_Comparison$Exp_k, Full_Comparison$GCAM_k, alternative = 'two.sided') ->Full_T_test
View(Full_T_test)
Full_T_test
#Type + Change (no average)
aov_Full_change <- aov(k ~ Type + change,
data = change_long_data)
source("C:/Users/bian240/OneDrive - PNNL/Desktop/Initial Project Code/GCAM-SoilC-Dynamics/anova.R")
aov_Full_change <- aov(k ~ Type + change,
data = change_long_data)
summary(aov_Full_change)
TukeyHSD(aov_Full_change)
AIC(aov_Full_change)
aov_big <- aov(k ~ Type + Basin_long_name + change,
data = change_long_data)
summary(aov_big)
TukeyHSD(aov_big)
AIC(aov_big)
View(Full_Comparison)
View(Full_Comparison)
Full_Comparison %>%
mutate(change = paste(Initial_Land_Use, Final_Land_Use, sep = ' to ')) %>%
mutate(difference = Exp_k - GCAM_k) %>%
group_by(change) %>%
summarise(Mean_k = mean(difference), std_dev = sd(difference)) -> mean_difference
View(mean_difference)
ggplot(mean_difference, aes(x = Mean_k, y = change))
ggplot(mean_difference, aes(x = Mean_k, y = change)) +
geom_point()
Full_Comparison %>%
mutate(change = paste(Initial_Land_Use, Final_Land_Use, sep = ' to ')) %>%
mutate(difference = Exp_k - GCAM_k) %>%
group_by(change) %>%
summarise(Mean_k = mean(difference), std_dev = sd(differencen, n = n())) -> mean_difference
Full_Comparison %>%
mutate(change = paste(Initial_Land_Use, Final_Land_Use, sep = ' to ')) %>%
mutate(difference = Exp_k - GCAM_k) %>%
group_by(change) %>%
summarise(Mean_k = mean(difference), std_dev = sd(difference), n = n()) -> mean_difference
Full_Comparison %>%
mutate(change = paste(Initial_Land_Use, Final_Land_Use, sep = ' to ')) %>%
mutate(difference = Exp_k - GCAM_k) %>%
group_by(change) %>%
summarise(Mean_k = mean(difference), std_dev = sd(difference), n = n()) -> mean_difference
ggplot(mean_difference, aes(x = Mean_k, y = change)) +
geom_point(size = n)
ggplot(mean_difference, aes(x = Mean_k, y = change)) +
geom_point(aes(size = n))
ggplot(mean_difference, aes(x = Mean_k, y = change)) +
geom_point(aes(size = n)) +
geom_errorbar(aes(xmin=Mean_k - std_dev, xmax=Mean_k + std_dev), width=.2,
position=position_dodge(0.05))
ggplot(mean_difference, aes(x = Mean_k, y = change)) +
geom_point(aes(size = n, shape = 15)) +
geom_errorbar(aes(xmin=Mean_k - std_dev, xmax=Mean_k + std_dev), width=.2,
position=position_dodge(0.05))
ggplot(mean_difference, aes(x = Mean_k, y = change)) +
geom_point(aes(size = n), shape = 15) +
geom_errorbar(aes(xmin=Mean_k - std_dev, xmax=Mean_k + std_dev), width=.2,
position=position_dodge(0.05))
ggplot(mean_difference, aes(x = Mean_k, y = change)) +
geom_point(aes(size = n), shape = 15) +
labs(x = 'k', y = 'Transition Type') +
geom_errorbar(aes(xmin=Mean_k - std_dev, xmax=Mean_k + std_dev), width=.2,
position=position_dodge(0.05)) +
theme_light()
ggplot(mean_difference, aes(x = Mean_k, y = change)) +
geom_point(aes(size = n), shape = 15) +
labs(x = 'k', y = 'Transition Type', legend = 'Sample Size' ) +
geom_errorbar(aes(xmin=Mean_k - std_dev, xmax=Mean_k + std_dev), width=.2,
position=position_dodge(0.05)) +
theme_light()
ggplot(mean_difference, aes(x = Mean_k, y = change)) +
geom_point(aes(size = n), shape = 15) +
labs(x = 'k', y = 'Transition Type') +
scale_size_manual(name = 'Sample Size') +
geom_errorbar(aes(xmin=Mean_k - std_dev, xmax=Mean_k + std_dev), width=.2,
position=position_dodge(0.05)) +
theme_light()
#Make the mean graph
Full_Comparison %>%
mutate(change = paste(Initial_Land_Use, Final_Land_Use, sep = ' to ')) %>%
mutate(difference = Exp_k - GCAM_k) %>%
group_by(change) %>%
summarise(Mean_k = mean(difference), std_dev = sd(difference), Sample Size = n()) -> mean_difference
Full_Comparison %>%
mutate(change = paste(Initial_Land_Use, Final_Land_Use, sep = ' to ')) %>%
mutate(difference = Exp_k - GCAM_k) %>%
group_by(change) %>%
summarise(Mean_k = mean(difference), std_dev = sd(difference), Sample_Size = n()) -> mean_difference
ggplot(mean_difference, aes(x = Mean_k, y = change)) +
geom_point(aes(size = n), shape = 15) +
labs(x = 'k', y = 'Transition Type') +
geom_errorbar(aes(xmin=Mean_k - std_dev, xmax=Mean_k + std_dev), width=.2,
position=position_dodge(0.05)) +
theme_light()
Full_Comparison %>%
mutate(change = paste(Initial_Land_Use, Final_Land_Use, sep = ' to ')) %>%
mutate(difference = Exp_k - GCAM_k) %>%
group_by(change) %>%
summarise(Mean_k = mean(difference), std_dev = sd(difference), n = n()) -> mean_difference
ggplot(mean_difference, aes(x = Mean_k, y = change)) +
geom_point(aes(size = n), shape = 15) +
labs(x = 'k', y = 'Transition Type') +
geom_errorbar(aes(xmin=Mean_k - std_dev, xmax=Mean_k + std_dev), width=.2,
position=position_dodge(0.05)) +
theme_light()
Full_Comparison %>%
mutate(change = paste(Initial_Land_Use, Final_Land_Use, sep = ' to ')) %>%
mutate(difference = Exp_k - GCAM_k) %>%
group_by(change) %>%
summarise(Mean_k = mean(difference), std_dev = sd(difference), 'Sample Size' = n()) -> mean_difference
ggplot(mean_difference, aes(x = Mean_k, y = change)) +
geom_point(aes(size = n), shape = 15) +
labs(x = 'k', y = 'Transition Type') +
geom_errorbar(aes(xmin=Mean_k - std_dev, xmax=Mean_k + std_dev), width=.2,
position=position_dodge(0.05)) +
theme_light()
ggplot(mean_difference, aes(x = Mean_k, y = change)) +
geom_point(aes(size = Sample_Size), shape = 15) +
labs(x = 'k', y = 'Transition Type') +
geom_errorbar(aes(xmin=Mean_k - std_dev, xmax=Mean_k + std_dev), width=.2,
position=position_dodge(0.05)) +
theme_light()
#Make the mean graph
Full_Comparison %>%
mutate(change = paste(Initial_Land_Use, Final_Land_Use, sep = ' to ')) %>%
mutate(difference = Exp_k - GCAM_k) %>%
group_by(change) %>%
summarise(Mean_k = mean(difference), std_dev = sd(difference), Sample_Size = n()) -> mean_difference
ggplot(mean_difference, aes(x = Mean_k, y = change)) +
geom_point(aes(size = Sample_Size), shape = 15) +
labs(x = 'k', y = 'Transition Type') +
geom_errorbar(aes(xmin=Mean_k - std_dev, xmax=Mean_k + std_dev), width=.2,
position=position_dodge(0.05)) +
theme_light()
?geom_vline
ggplot(mean_difference, aes(x = Mean_k, y = change)) +
geom_point(aes(size = Sample_Size), shape = 15) +
labs(x = 'k', y = 'Transition Type') +
geom_errorbar(aes(xmin=Mean_k - std_dev, xmax=Mean_k + std_dev), width=.2,
position=position_dodge(0.05)) +
geom_vline(xintercept = 0, linetype = 'dashed', color = 'blue') +
theme_light()
?xlim
ggplot(mean_difference, aes(x = Mean_k, y = change)) +
geom_point(aes(size = Sample_Size), shape = 15) +
labs(x = 'k', y = 'Transition Type') +
geom_errorbar(aes(xmin=Mean_k - std_dev, xmax=Mean_k + std_dev), width=.2,
position=position_dodge(0.05)) +
xlim(-0.1, 0.1) +
geom_vline(xintercept = 0, linetype = 'dashed', color = 'blue') +
theme_light()
Full_Comparison %>%
mutate(change = paste(Initial_Land_Use, Final_Land_Use, sep = ' to ')) %>%
mutate(difference = Exp_k - GCAM_k) %>%
group_by(change) %>%
summarise(Mean_k = mean(difference), std_dev = sd(difference), Sample_Size = n()) -> mean_difference
ggplot(mean_difference, aes(x = Mean_k, y = change)) +
geom_point(aes(size = Sample_Size), shape = 15) +
labs(x = 'k', y = 'Transition Type') +
geom_errorbar(aes(xmin=Mean_k - std_dev, xmax=Mean_k + std_dev), width=.2,
position=position_dodge(0.05)) +
xlim(-0.1, 0.1) +
geom_vline(xintercept = 0, linetype = 'dashed', color = 'blue') +
theme_light()
ggsave('Fake_forest.jpeg', path = 'Graphs')
>>>>>>> Stashed changes
